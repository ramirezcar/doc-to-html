{"ast":null,"code":"exports.read = read;\nexports._findPartPaths = findPartPaths;\n\nvar path = require(\"path\");\n\nvar promises = require(\"../promises\");\n\nvar documents = require(\"../documents\");\n\nvar Result = require(\"../results\").Result;\n\nvar zipfile = require(\"../zipfile\");\n\nvar readXmlFromZipFile = require(\"./office-xml-reader\").readXmlFromZipFile;\n\nvar createBodyReader = require(\"./body-reader\").createBodyReader;\n\nvar DocumentXmlReader = require(\"./document-xml-reader\").DocumentXmlReader;\n\nvar relationshipsReader = require(\"./relationships-reader\");\n\nvar contentTypesReader = require(\"./content-types-reader\");\n\nvar numberingXml = require(\"./numbering-xml\");\n\nvar stylesReader = require(\"./styles-reader\");\n\nvar notesReader = require(\"./notes-reader\");\n\nvar commentsReader = require(\"./comments-reader\");\n\nvar Files = require(\"./files\").Files;\n\nfunction read(docxFile, input) {\n  input = input || {};\n  return promises.props({\n    contentTypes: readContentTypesFromZipFile(docxFile),\n    partPaths: findPartPaths(docxFile),\n    docxFile: docxFile,\n    files: new Files(input.path ? path.dirname(input.path) : null)\n  }).also(function (result) {\n    return {\n      styles: readStylesFromZipFile(docxFile, result.partPaths.styles)\n    };\n  }).also(function (result) {\n    return {\n      numbering: readNumberingFromZipFile(docxFile, result.partPaths.numbering, result.styles)\n    };\n  }).also(function (result) {\n    return {\n      footnotes: readXmlFileWithBody(result.partPaths.footnotes, result, function (bodyReader, xml) {\n        if (xml) {\n          return notesReader.createFootnotesReader(bodyReader)(xml);\n        } else {\n          return new Result([]);\n        }\n      }),\n      endnotes: readXmlFileWithBody(result.partPaths.endnotes, result, function (bodyReader, xml) {\n        if (xml) {\n          return notesReader.createEndnotesReader(bodyReader)(xml);\n        } else {\n          return new Result([]);\n        }\n      }),\n      comments: readXmlFileWithBody(result.partPaths.comments, result, function (bodyReader, xml) {\n        if (xml) {\n          return commentsReader.createCommentsReader(bodyReader)(xml);\n        } else {\n          return new Result([]);\n        }\n      })\n    };\n  }).also(function (result) {\n    return {\n      notes: result.footnotes.flatMap(function (footnotes) {\n        return result.endnotes.map(function (endnotes) {\n          return new documents.Notes(footnotes.concat(endnotes));\n        });\n      })\n    };\n  }).then(function (result) {\n    return readXmlFileWithBody(result.partPaths.mainDocument, result, function (bodyReader, xml) {\n      return result.notes.flatMap(function (notes) {\n        return result.comments.flatMap(function (comments) {\n          var reader = new DocumentXmlReader({\n            bodyReader: bodyReader,\n            notes: notes,\n            comments: comments\n          });\n          return reader.convertXmlToDocument(xml);\n        });\n      });\n    });\n  });\n}\n\nfunction findPartPaths(docxFile) {\n  return readPackageRelationships(docxFile).then(function (packageRelationships) {\n    var mainDocumentPath = findPartPath({\n      docxFile: docxFile,\n      relationships: packageRelationships,\n      relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n      basePath: \"\",\n      fallbackPath: \"word/document.xml\"\n    });\n\n    if (!docxFile.exists(mainDocumentPath)) {\n      throw new Error(\"Could not find main document part. Are you sure this is a valid .docx file?\");\n    }\n\n    return xmlFileReader({\n      filename: relationshipsFilename(mainDocumentPath),\n      readElement: relationshipsReader.readRelationships,\n      defaultValue: relationshipsReader.defaultValue\n    })(docxFile).then(function (documentRelationships) {\n      function findPartRelatedToMainDocument(name) {\n        return findPartPath({\n          docxFile: docxFile,\n          relationships: documentRelationships,\n          relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/\" + name,\n          basePath: zipfile.splitPath(mainDocumentPath).dirname,\n          fallbackPath: \"word/\" + name + \".xml\"\n        });\n      }\n\n      return {\n        mainDocument: mainDocumentPath,\n        comments: findPartRelatedToMainDocument(\"comments\"),\n        endnotes: findPartRelatedToMainDocument(\"endnotes\"),\n        footnotes: findPartRelatedToMainDocument(\"footnotes\"),\n        numbering: findPartRelatedToMainDocument(\"numbering\"),\n        styles: findPartRelatedToMainDocument(\"styles\")\n      };\n    });\n  });\n}\n\nfunction findPartPath(options) {\n  var docxFile = options.docxFile;\n  var relationships = options.relationships;\n  var relationshipType = options.relationshipType;\n  var basePath = options.basePath;\n  var fallbackPath = options.fallbackPath;\n  var targets = relationships.findTargetsByType(relationshipType);\n  var normalisedTargets = targets.map(function (target) {\n    return stripPrefix(zipfile.joinPath(basePath, target), \"/\");\n  });\n  var validTargets = normalisedTargets.filter(function (target) {\n    return docxFile.exists(target);\n  });\n\n  if (validTargets.length === 0) {\n    return fallbackPath;\n  } else {\n    return validTargets[0];\n  }\n}\n\nfunction stripPrefix(value, prefix) {\n  if (value.substring(0, prefix.length) === prefix) {\n    return value.substring(prefix.length);\n  } else {\n    return value;\n  }\n}\n\nfunction xmlFileReader(options) {\n  return function (zipFile) {\n    return readXmlFromZipFile(zipFile, options.filename).then(function (element) {\n      return element ? options.readElement(element) : options.defaultValue;\n    });\n  };\n}\n\nfunction readXmlFileWithBody(filename, options, func) {\n  var readRelationshipsFromZipFile = xmlFileReader({\n    filename: relationshipsFilename(filename),\n    readElement: relationshipsReader.readRelationships,\n    defaultValue: relationshipsReader.defaultValue\n  });\n  return readRelationshipsFromZipFile(options.docxFile).then(function (relationships) {\n    var bodyReader = new createBodyReader({\n      relationships: relationships,\n      contentTypes: options.contentTypes,\n      docxFile: options.docxFile,\n      numbering: options.numbering,\n      styles: options.styles,\n      files: options.files\n    });\n    return readXmlFromZipFile(options.docxFile, filename).then(function (xml) {\n      return func(bodyReader, xml);\n    });\n  });\n}\n\nfunction relationshipsFilename(filename) {\n  var split = zipfile.splitPath(filename);\n  return zipfile.joinPath(split.dirname, \"_rels\", split.basename + \".rels\");\n}\n\nvar readContentTypesFromZipFile = xmlFileReader({\n  filename: \"[Content_Types].xml\",\n  readElement: contentTypesReader.readContentTypesFromXml,\n  defaultValue: contentTypesReader.defaultContentTypes\n});\n\nfunction readNumberingFromZipFile(zipFile, path, styles) {\n  return xmlFileReader({\n    filename: path,\n    readElement: function readElement(element) {\n      return numberingXml.readNumberingXml(element, {\n        styles: styles\n      });\n    },\n    defaultValue: numberingXml.defaultNumbering\n  })(zipFile);\n}\n\nfunction readStylesFromZipFile(zipFile, path) {\n  return xmlFileReader({\n    filename: path,\n    readElement: stylesReader.readStylesXml,\n    defaultValue: stylesReader.defaultStyles\n  })(zipFile);\n}\n\nvar readPackageRelationships = xmlFileReader({\n  filename: \"_rels/.rels\",\n  readElement: relationshipsReader.readRelationships,\n  defaultValue: relationshipsReader.defaultValue\n});","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/docx/docx-reader.js"],"names":["exports","read","_findPartPaths","findPartPaths","path","require","promises","documents","Result","zipfile","readXmlFromZipFile","createBodyReader","DocumentXmlReader","relationshipsReader","contentTypesReader","numberingXml","stylesReader","notesReader","commentsReader","Files","docxFile","input","props","contentTypes","readContentTypesFromZipFile","partPaths","files","dirname","also","result","styles","readStylesFromZipFile","numbering","readNumberingFromZipFile","footnotes","readXmlFileWithBody","bodyReader","xml","createFootnotesReader","endnotes","createEndnotesReader","comments","createCommentsReader","notes","flatMap","map","Notes","concat","then","mainDocument","reader","convertXmlToDocument","readPackageRelationships","packageRelationships","mainDocumentPath","findPartPath","relationships","relationshipType","basePath","fallbackPath","exists","Error","xmlFileReader","filename","relationshipsFilename","readElement","readRelationships","defaultValue","documentRelationships","findPartRelatedToMainDocument","name","splitPath","options","targets","findTargetsByType","normalisedTargets","target","stripPrefix","joinPath","validTargets","filter","length","value","prefix","substring","zipFile","element","func","readRelationshipsFromZipFile","split","basename","readContentTypesFromXml","defaultContentTypes","readNumberingXml","defaultNumbering","readStylesXml","defaultStyles"],"mappings":"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","sourcesContent":["exports.read = read;\nexports._findPartPaths = findPartPaths;\n\nvar path = require(\"path\");\n\nvar promises = require(\"../promises\");\nvar documents = require(\"../documents\");\nvar Result = require(\"../results\").Result;\nvar zipfile = require(\"../zipfile\");\n\nvar readXmlFromZipFile = require(\"./office-xml-reader\").readXmlFromZipFile;\nvar createBodyReader = require(\"./body-reader\").createBodyReader;\nvar DocumentXmlReader = require(\"./document-xml-reader\").DocumentXmlReader;\nvar relationshipsReader = require(\"./relationships-reader\");\nvar contentTypesReader = require(\"./content-types-reader\");\nvar numberingXml = require(\"./numbering-xml\");\nvar stylesReader = require(\"./styles-reader\");\nvar notesReader = require(\"./notes-reader\");\nvar commentsReader = require(\"./comments-reader\");\nvar Files = require(\"./files\").Files;\n\n\nfunction read(docxFile, input) {\n    input = input || {};\n\n    return promises.props({\n        contentTypes: readContentTypesFromZipFile(docxFile),\n        partPaths: findPartPaths(docxFile),\n        docxFile: docxFile,\n        files: new Files(input.path ? path.dirname(input.path) : null)\n    }).also(function(result) {\n        return {\n            styles: readStylesFromZipFile(docxFile, result.partPaths.styles)\n        };\n    }).also(function(result) {\n        return {\n            numbering: readNumberingFromZipFile(docxFile, result.partPaths.numbering, result.styles)\n        };\n    }).also(function(result) {\n        return {\n            footnotes: readXmlFileWithBody(result.partPaths.footnotes, result, function(bodyReader, xml) {\n                if (xml) {\n                    return notesReader.createFootnotesReader(bodyReader)(xml);\n                } else {\n                    return new Result([]);\n                }\n            }),\n            endnotes: readXmlFileWithBody(result.partPaths.endnotes, result, function(bodyReader, xml) {\n                if (xml) {\n                    return notesReader.createEndnotesReader(bodyReader)(xml);\n                } else {\n                    return new Result([]);\n                }\n            }),\n            comments: readXmlFileWithBody(result.partPaths.comments, result, function(bodyReader, xml) {\n                if (xml) {\n                    return commentsReader.createCommentsReader(bodyReader)(xml);\n                } else {\n                    return new Result([]);\n                }\n            })\n        };\n    }).also(function(result) {\n        return {\n            notes: result.footnotes.flatMap(function(footnotes) {\n                return result.endnotes.map(function(endnotes) {\n                    return new documents.Notes(footnotes.concat(endnotes));\n                });\n            })\n        };\n    }).then(function(result) {\n        return readXmlFileWithBody(result.partPaths.mainDocument, result, function(bodyReader, xml) {\n            return result.notes.flatMap(function(notes) {\n                return result.comments.flatMap(function(comments) {\n                    var reader = new DocumentXmlReader({\n                        bodyReader: bodyReader,\n                        notes: notes,\n                        comments: comments\n                    });\n                    return reader.convertXmlToDocument(xml);\n                });\n            });\n        });\n    });\n}\n\nfunction findPartPaths(docxFile) {\n    return readPackageRelationships(docxFile).then(function(packageRelationships) {\n        var mainDocumentPath = findPartPath({\n            docxFile: docxFile,\n            relationships: packageRelationships,\n            relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\n            basePath: \"\",\n            fallbackPath: \"word/document.xml\"\n        });\n\n        if (!docxFile.exists(mainDocumentPath)) {\n            throw new Error(\"Could not find main document part. Are you sure this is a valid .docx file?\");\n        }\n\n        return xmlFileReader({\n            filename: relationshipsFilename(mainDocumentPath),\n            readElement: relationshipsReader.readRelationships,\n            defaultValue: relationshipsReader.defaultValue\n        })(docxFile).then(function(documentRelationships) {\n            function findPartRelatedToMainDocument(name) {\n                return findPartPath({\n                    docxFile: docxFile,\n                    relationships: documentRelationships,\n                    relationshipType: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/\" + name,\n                    basePath: zipfile.splitPath(mainDocumentPath).dirname,\n                    fallbackPath: \"word/\" + name + \".xml\"\n                });\n            }\n\n            return {\n                mainDocument: mainDocumentPath,\n                comments: findPartRelatedToMainDocument(\"comments\"),\n                endnotes: findPartRelatedToMainDocument(\"endnotes\"),\n                footnotes: findPartRelatedToMainDocument(\"footnotes\"),\n                numbering: findPartRelatedToMainDocument(\"numbering\"),\n                styles: findPartRelatedToMainDocument(\"styles\")\n            };\n        });\n    });\n}\n\nfunction findPartPath(options) {\n    var docxFile = options.docxFile;\n    var relationships = options.relationships;\n    var relationshipType = options.relationshipType;\n    var basePath = options.basePath;\n    var fallbackPath = options.fallbackPath;\n\n    var targets = relationships.findTargetsByType(relationshipType);\n    var normalisedTargets = targets.map(function(target) {\n        return stripPrefix(zipfile.joinPath(basePath, target), \"/\");\n    });\n    var validTargets = normalisedTargets.filter(function(target) {\n        return docxFile.exists(target);\n    });\n    if (validTargets.length === 0) {\n        return fallbackPath;\n    } else {\n        return validTargets[0];\n    }\n}\n\nfunction stripPrefix(value, prefix) {\n    if (value.substring(0, prefix.length) === prefix) {\n        return value.substring(prefix.length);\n    } else {\n        return value;\n    }\n}\n\nfunction xmlFileReader(options) {\n    return function(zipFile) {\n        return readXmlFromZipFile(zipFile, options.filename)\n            .then(function(element) {\n                return element ? options.readElement(element) : options.defaultValue;\n            });\n    };\n}\n\nfunction readXmlFileWithBody(filename, options, func) {\n    var readRelationshipsFromZipFile = xmlFileReader({\n        filename: relationshipsFilename(filename),\n        readElement: relationshipsReader.readRelationships,\n        defaultValue: relationshipsReader.defaultValue\n    });\n\n    return readRelationshipsFromZipFile(options.docxFile).then(function(relationships) {\n        var bodyReader = new createBodyReader({\n            relationships: relationships,\n            contentTypes: options.contentTypes,\n            docxFile: options.docxFile,\n            numbering: options.numbering,\n            styles: options.styles,\n            files: options.files\n        });\n        return readXmlFromZipFile(options.docxFile, filename)\n            .then(function(xml) {\n                return func(bodyReader, xml);\n            });\n    });\n}\n\nfunction relationshipsFilename(filename) {\n    var split = zipfile.splitPath(filename);\n    return zipfile.joinPath(split.dirname, \"_rels\", split.basename + \".rels\");\n}\n\nvar readContentTypesFromZipFile = xmlFileReader({\n    filename: \"[Content_Types].xml\",\n    readElement: contentTypesReader.readContentTypesFromXml,\n    defaultValue: contentTypesReader.defaultContentTypes\n});\n\nfunction readNumberingFromZipFile(zipFile, path, styles) {\n    return xmlFileReader({\n        filename: path,\n        readElement: function(element) {\n            return numberingXml.readNumberingXml(element, {styles: styles});\n        },\n        defaultValue: numberingXml.defaultNumbering\n    })(zipFile);\n}\n\nfunction readStylesFromZipFile(zipFile, path) {\n    return xmlFileReader({\n        filename: path,\n        readElement: stylesReader.readStylesXml,\n        defaultValue: stylesReader.defaultStyles\n    })(zipFile);\n}\n\nvar readPackageRelationships = xmlFileReader({\n    filename: \"_rels/.rels\",\n    readElement: relationshipsReader.readRelationships,\n    defaultValue: relationshipsReader.defaultValue\n});\n"]},"metadata":{},"sourceType":"script"}