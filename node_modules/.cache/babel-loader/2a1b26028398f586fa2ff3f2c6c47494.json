{"ast":null,"code":"var lop = require(\"lop\");\n\nvar RegexTokeniser = lop.RegexTokeniser;\nexports.tokenise = tokenise;\nvar stringPrefix = \"'((?:\\\\\\\\.|[^'])*)\";\n\nfunction tokenise(string) {\n  var identifierCharacter = \"(?:[a-zA-Z\\\\-_]|\\\\\\\\.)\";\n  var tokeniser = new RegexTokeniser([{\n    name: \"identifier\",\n    regex: new RegExp(\"(\" + identifierCharacter + \"(?:\" + identifierCharacter + \"|[0-9])*)\")\n  }, {\n    name: \"dot\",\n    regex: /\\./\n  }, {\n    name: \"colon\",\n    regex: /:/\n  }, {\n    name: \"gt\",\n    regex: />/\n  }, {\n    name: \"whitespace\",\n    regex: /\\s+/\n  }, {\n    name: \"arrow\",\n    regex: /=>/\n  }, {\n    name: \"equals\",\n    regex: /=/\n  }, {\n    name: \"startsWith\",\n    regex: /\\^=/\n  }, {\n    name: \"open-paren\",\n    regex: /\\(/\n  }, {\n    name: \"close-paren\",\n    regex: /\\)/\n  }, {\n    name: \"open-square-bracket\",\n    regex: /\\[/\n  }, {\n    name: \"close-square-bracket\",\n    regex: /\\]/\n  }, {\n    name: \"string\",\n    regex: new RegExp(stringPrefix + \"'\")\n  }, {\n    name: \"unterminated-string\",\n    regex: new RegExp(stringPrefix)\n  }, {\n    name: \"integer\",\n    regex: /([0-9]+)/\n  }, {\n    name: \"choice\",\n    regex: /\\|/\n  }, {\n    name: \"bang\",\n    regex: /(!)/\n  }]);\n  return tokeniser.tokenise(string);\n}","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/styles/parser/tokeniser.js"],"names":["lop","require","RegexTokeniser","exports","tokenise","stringPrefix","string","identifierCharacter","tokeniser","name","regex","RegExp"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAjB;;AACA,IAAIC,cAAc,GAAGF,GAAG,CAACE,cAAzB;AAEAC,OAAO,CAACC,QAAR,GAAmBA,QAAnB;AAEA,IAAIC,YAAY,GAAG,oBAAnB;;AAEA,SAASD,QAAT,CAAkBE,MAAlB,EAA0B;AACtB,MAAIC,mBAAmB,GAAG,wBAA1B;AACA,MAAIC,SAAS,GAAG,IAAIN,cAAJ,CAAmB,CAC/B;AAACO,IAAAA,IAAI,EAAE,YAAP;AAAqBC,IAAAA,KAAK,EAAE,IAAIC,MAAJ,CAAW,MAAMJ,mBAAN,GAA4B,KAA5B,GAAoCA,mBAApC,GAA0D,WAArE;AAA5B,GAD+B,EAE/B;AAACE,IAAAA,IAAI,EAAE,KAAP;AAAcC,IAAAA,KAAK,EAAE;AAArB,GAF+B,EAG/B;AAACD,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAH+B,EAI/B;AAACD,IAAAA,IAAI,EAAE,IAAP;AAAaC,IAAAA,KAAK,EAAE;AAApB,GAJ+B,EAK/B;AAACD,IAAAA,IAAI,EAAE,YAAP;AAAqBC,IAAAA,KAAK,EAAE;AAA5B,GAL+B,EAM/B;AAACD,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE;AAAvB,GAN+B,EAO/B;AAACD,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAP+B,EAQ/B;AAACD,IAAAA,IAAI,EAAE,YAAP;AAAqBC,IAAAA,KAAK,EAAE;AAA5B,GAR+B,EAS/B;AAACD,IAAAA,IAAI,EAAE,YAAP;AAAqBC,IAAAA,KAAK,EAAE;AAA5B,GAT+B,EAU/B;AAACD,IAAAA,IAAI,EAAE,aAAP;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAV+B,EAW/B;AAACD,IAAAA,IAAI,EAAE,qBAAP;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GAX+B,EAY/B;AAACD,IAAAA,IAAI,EAAE,sBAAP;AAA+BC,IAAAA,KAAK,EAAE;AAAtC,GAZ+B,EAa/B;AAACD,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE,IAAIC,MAAJ,CAAWN,YAAY,GAAG,GAA1B;AAAxB,GAb+B,EAc/B;AAACI,IAAAA,IAAI,EAAE,qBAAP;AAA8BC,IAAAA,KAAK,EAAE,IAAIC,MAAJ,CAAWN,YAAX;AAArC,GAd+B,EAe/B;AAACI,IAAAA,IAAI,EAAE,SAAP;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GAf+B,EAgB/B;AAACD,IAAAA,IAAI,EAAE,QAAP;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAhB+B,EAiB/B;AAACD,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,KAAK,EAAE;AAAtB,GAjB+B,CAAnB,CAAhB;AAmBA,SAAOF,SAAS,CAACJ,QAAV,CAAmBE,MAAnB,CAAP;AACH","sourcesContent":["var lop = require(\"lop\");\nvar RegexTokeniser = lop.RegexTokeniser;\n\nexports.tokenise = tokenise;\n\nvar stringPrefix = \"'((?:\\\\\\\\.|[^'])*)\";\n\nfunction tokenise(string) {\n    var identifierCharacter = \"(?:[a-zA-Z\\\\-_]|\\\\\\\\.)\";\n    var tokeniser = new RegexTokeniser([\n        {name: \"identifier\", regex: new RegExp(\"(\" + identifierCharacter + \"(?:\" + identifierCharacter + \"|[0-9])*)\")},\n        {name: \"dot\", regex: /\\./},\n        {name: \"colon\", regex: /:/},\n        {name: \"gt\", regex: />/},\n        {name: \"whitespace\", regex: /\\s+/},\n        {name: \"arrow\", regex: /=>/},\n        {name: \"equals\", regex: /=/},\n        {name: \"startsWith\", regex: /\\^=/},\n        {name: \"open-paren\", regex: /\\(/},\n        {name: \"close-paren\", regex: /\\)/},\n        {name: \"open-square-bracket\", regex: /\\[/},\n        {name: \"close-square-bracket\", regex: /\\]/},\n        {name: \"string\", regex: new RegExp(stringPrefix + \"'\")},\n        {name: \"unterminated-string\", regex: new RegExp(stringPrefix)},\n        {name: \"integer\", regex: /([0-9]+)/},\n        {name: \"choice\", regex: /\\|/},\n        {name: \"bang\", regex: /(!)/}\n    ]);\n    return tokeniser.tokenise(string);\n}\n"]},"metadata":{},"sourceType":"script"}