{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var XMLDTDNotation,\n      XMLNode,\n      extend = function extend(child, parent) {\n    for (var key in parent) {\n      if (hasProp.call(parent, key)) child[key] = parent[key];\n    }\n\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n    child.__super__ = parent.prototype;\n    return child;\n  },\n      hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLDTDNotation = function (superClass) {\n    extend(XMLDTDNotation, superClass);\n\n    function XMLDTDNotation(parent, name, value) {\n      XMLDTDNotation.__super__.constructor.call(this, parent);\n\n      if (name == null) {\n        throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n      }\n\n      if (!value.pubID && !value.sysID) {\n        throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n      }\n\n      this.name = this.stringify.eleName(name);\n\n      if (value.pubID != null) {\n        this.pubID = this.stringify.dtdPubID(value.pubID);\n      }\n\n      if (value.sysID != null) {\n        this.sysID = this.stringify.dtdSysID(value.sysID);\n      }\n    }\n\n    XMLDTDNotation.prototype.toString = function (options) {\n      return this.options.writer.set(options).dtdNotation(this);\n    };\n\n    return XMLDTDNotation;\n  }(XMLNode);\n}).call(this);","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/xmlbuilder/lib/XMLDTDNotation.js"],"names":["XMLDTDNotation","XMLNode","extend","child","parent","key","hasProp","call","ctor","constructor","prototype","__super__","hasOwnProperty","require","module","exports","superClass","name","value","Error","debugInfo","pubID","sysID","stringify","eleName","dtdPubID","dtdSysID","toString","options","writer","set","dtdNotation"],"mappings":"AAAA;AACA,CAAC,YAAW;AACV,MAAIA,cAAJ;AAAA,MAAoBC,OAApB;AAAA,MACEC,MAAM,GAAG,SAATA,MAAS,CAASC,KAAT,EAAgBC,MAAhB,EAAwB;AAAE,SAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIE,OAAO,CAACC,IAAR,CAAaH,MAAb,EAAqBC,GAArB,CAAJ,EAA+BF,KAAK,CAACE,GAAD,CAAL,GAAaD,MAAM,CAACC,GAAD,CAAnB;AAA2B;;AAAC,aAASG,IAAT,GAAgB;AAAE,WAAKC,WAAL,GAAmBN,KAAnB;AAA2B;;AAACK,IAAAA,IAAI,CAACE,SAAL,GAAiBN,MAAM,CAACM,SAAxB;AAAmCP,IAAAA,KAAK,CAACO,SAAN,GAAkB,IAAIF,IAAJ,EAAlB;AAA8BL,IAAAA,KAAK,CAACQ,SAAN,GAAkBP,MAAM,CAACM,SAAzB;AAAoC,WAAOP,KAAP;AAAe,GAD5R;AAAA,MAEEG,OAAO,GAAG,GAAGM,cAFf;;AAIAX,EAAAA,OAAO,GAAGY,OAAO,CAAC,WAAD,CAAjB;;AAEAC,EAAAA,MAAM,CAACC,OAAP,GAAiBf,cAAc,GAAI,UAASgB,UAAT,EAAqB;AACtDd,IAAAA,MAAM,CAACF,cAAD,EAAiBgB,UAAjB,CAAN;;AAEA,aAAShB,cAAT,CAAwBI,MAAxB,EAAgCa,IAAhC,EAAsCC,KAAtC,EAA6C;AAC3ClB,MAAAA,cAAc,CAACW,SAAf,CAAyBF,WAAzB,CAAqCF,IAArC,CAA0C,IAA1C,EAAgDH,MAAhD;;AACA,UAAIa,IAAI,IAAI,IAAZ,EAAkB;AAChB,cAAM,IAAIE,KAAJ,CAAU,gCAAgC,KAAKC,SAAL,CAAeH,IAAf,CAA1C,CAAN;AACD;;AACD,UAAI,CAACC,KAAK,CAACG,KAAP,IAAgB,CAACH,KAAK,CAACI,KAA3B,EAAkC;AAChC,cAAM,IAAIH,KAAJ,CAAU,uEAAuE,KAAKC,SAAL,CAAeH,IAAf,CAAjF,CAAN;AACD;;AACD,WAAKA,IAAL,GAAY,KAAKM,SAAL,CAAeC,OAAf,CAAuBP,IAAvB,CAAZ;;AACA,UAAIC,KAAK,CAACG,KAAN,IAAe,IAAnB,EAAyB;AACvB,aAAKA,KAAL,GAAa,KAAKE,SAAL,CAAeE,QAAf,CAAwBP,KAAK,CAACG,KAA9B,CAAb;AACD;;AACD,UAAIH,KAAK,CAACI,KAAN,IAAe,IAAnB,EAAyB;AACvB,aAAKA,KAAL,GAAa,KAAKC,SAAL,CAAeG,QAAf,CAAwBR,KAAK,CAACI,KAA9B,CAAb;AACD;AACF;;AAEDtB,IAAAA,cAAc,CAACU,SAAf,CAAyBiB,QAAzB,GAAoC,UAASC,OAAT,EAAkB;AACpD,aAAO,KAAKA,OAAL,CAAaC,MAAb,CAAoBC,GAApB,CAAwBF,OAAxB,EAAiCG,WAAjC,CAA6C,IAA7C,CAAP;AACD,KAFD;;AAIA,WAAO/B,cAAP;AAED,GA1BiC,CA0B/BC,OA1B+B,CAAlC;AA4BD,CAnCD,EAmCGM,IAnCH,CAmCQ,IAnCR","sourcesContent":["// Generated by CoffeeScript 1.12.7\n(function() {\n  var XMLDTDNotation, XMLNode,\n    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n    hasProp = {}.hasOwnProperty;\n\n  XMLNode = require('./XMLNode');\n\n  module.exports = XMLDTDNotation = (function(superClass) {\n    extend(XMLDTDNotation, superClass);\n\n    function XMLDTDNotation(parent, name, value) {\n      XMLDTDNotation.__super__.constructor.call(this, parent);\n      if (name == null) {\n        throw new Error(\"Missing DTD notation name. \" + this.debugInfo(name));\n      }\n      if (!value.pubID && !value.sysID) {\n        throw new Error(\"Public or system identifiers are required for an external entity. \" + this.debugInfo(name));\n      }\n      this.name = this.stringify.eleName(name);\n      if (value.pubID != null) {\n        this.pubID = this.stringify.dtdPubID(value.pubID);\n      }\n      if (value.sysID != null) {\n        this.sysID = this.stringify.dtdSysID(value.sysID);\n      }\n    }\n\n    XMLDTDNotation.prototype.toString = function(options) {\n      return this.options.writer.set(options).dtdNotation(this);\n    };\n\n    return XMLDTDNotation;\n\n  })(XMLNode);\n\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}