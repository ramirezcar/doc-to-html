{"ast":null,"code":"exports.readContentTypesFromXml = readContentTypesFromXml;\nvar fallbackContentTypes = {\n  \"png\": \"png\",\n  \"gif\": \"gif\",\n  \"jpeg\": \"jpeg\",\n  \"jpg\": \"jpeg\",\n  \"tif\": \"tiff\",\n  \"tiff\": \"tiff\",\n  \"bmp\": \"bmp\"\n};\nexports.defaultContentTypes = contentTypes({}, {});\n\nfunction readContentTypesFromXml(element) {\n  var extensionDefaults = {};\n  var overrides = {};\n  element.children.forEach(function (child) {\n    if (child.name === \"content-types:Default\") {\n      extensionDefaults[child.attributes.Extension] = child.attributes.ContentType;\n    }\n\n    if (child.name === \"content-types:Override\") {\n      var name = child.attributes.PartName;\n\n      if (name.charAt(0) === \"/\") {\n        name = name.substring(1);\n      }\n\n      overrides[name] = child.attributes.ContentType;\n    }\n  });\n  return contentTypes(overrides, extensionDefaults);\n}\n\nfunction contentTypes(overrides, extensionDefaults) {\n  return {\n    findContentType: function findContentType(path) {\n      var overrideContentType = overrides[path];\n\n      if (overrideContentType) {\n        return overrideContentType;\n      } else {\n        var pathParts = path.split(\".\");\n        var extension = pathParts[pathParts.length - 1];\n\n        if (extensionDefaults.hasOwnProperty(extension)) {\n          return extensionDefaults[extension];\n        } else {\n          var fallback = fallbackContentTypes[extension.toLowerCase()];\n\n          if (fallback) {\n            return \"image/\" + fallback;\n          } else {\n            return null;\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/docx/content-types-reader.js"],"names":["exports","readContentTypesFromXml","fallbackContentTypes","defaultContentTypes","contentTypes","element","extensionDefaults","overrides","children","forEach","child","name","attributes","Extension","ContentType","PartName","charAt","substring","findContentType","path","overrideContentType","pathParts","split","extension","length","hasOwnProperty","fallback","toLowerCase"],"mappings":"AAAAA,OAAO,CAACC,uBAAR,GAAkCA,uBAAlC;AAEA,IAAIC,oBAAoB,GAAG;AACvB,SAAO,KADgB;AAEvB,SAAO,KAFgB;AAGvB,UAAQ,MAHe;AAIvB,SAAO,MAJgB;AAKvB,SAAO,MALgB;AAMvB,UAAQ,MANe;AAOvB,SAAO;AAPgB,CAA3B;AAUAF,OAAO,CAACG,mBAAR,GAA8BC,YAAY,CAAC,EAAD,EAAK,EAAL,CAA1C;;AAGA,SAASH,uBAAT,CAAiCI,OAAjC,EAA0C;AACtC,MAAIC,iBAAiB,GAAG,EAAxB;AACA,MAAIC,SAAS,GAAG,EAAhB;AAEAF,EAAAA,OAAO,CAACG,QAAR,CAAiBC,OAAjB,CAAyB,UAASC,KAAT,EAAgB;AACrC,QAAIA,KAAK,CAACC,IAAN,KAAe,uBAAnB,EAA4C;AACxCL,MAAAA,iBAAiB,CAACI,KAAK,CAACE,UAAN,CAAiBC,SAAlB,CAAjB,GAAgDH,KAAK,CAACE,UAAN,CAAiBE,WAAjE;AACH;;AACD,QAAIJ,KAAK,CAACC,IAAN,KAAe,wBAAnB,EAA6C;AACzC,UAAIA,IAAI,GAAGD,KAAK,CAACE,UAAN,CAAiBG,QAA5B;;AACA,UAAIJ,IAAI,CAACK,MAAL,CAAY,CAAZ,MAAmB,GAAvB,EAA4B;AACxBL,QAAAA,IAAI,GAAGA,IAAI,CAACM,SAAL,CAAe,CAAf,CAAP;AACH;;AACDV,MAAAA,SAAS,CAACI,IAAD,CAAT,GAAkBD,KAAK,CAACE,UAAN,CAAiBE,WAAnC;AACH;AACJ,GAXD;AAYA,SAAOV,YAAY,CAACG,SAAD,EAAYD,iBAAZ,CAAnB;AACH;;AAED,SAASF,YAAT,CAAsBG,SAAtB,EAAiCD,iBAAjC,EAAoD;AAChD,SAAO;AACHY,IAAAA,eAAe,EAAE,yBAASC,IAAT,EAAe;AAC5B,UAAIC,mBAAmB,GAAGb,SAAS,CAACY,IAAD,CAAnC;;AACA,UAAIC,mBAAJ,EAAyB;AACrB,eAAOA,mBAAP;AACH,OAFD,MAEO;AACH,YAAIC,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAW,GAAX,CAAhB;AACA,YAAIC,SAAS,GAAGF,SAAS,CAACA,SAAS,CAACG,MAAV,GAAmB,CAApB,CAAzB;;AACA,YAAIlB,iBAAiB,CAACmB,cAAlB,CAAiCF,SAAjC,CAAJ,EAAiD;AAC7C,iBAAOjB,iBAAiB,CAACiB,SAAD,CAAxB;AACH,SAFD,MAEO;AACH,cAAIG,QAAQ,GAAGxB,oBAAoB,CAACqB,SAAS,CAACI,WAAV,EAAD,CAAnC;;AACA,cAAID,QAAJ,EAAc;AACV,mBAAO,WAAWA,QAAlB;AACH,WAFD,MAEO;AACH,mBAAO,IAAP;AACH;AACJ;AACJ;AACJ;AAnBE,GAAP;AAsBH","sourcesContent":["exports.readContentTypesFromXml = readContentTypesFromXml;\n\nvar fallbackContentTypes = {\n    \"png\": \"png\",\n    \"gif\": \"gif\",\n    \"jpeg\": \"jpeg\",\n    \"jpg\": \"jpeg\",\n    \"tif\": \"tiff\",\n    \"tiff\": \"tiff\",\n    \"bmp\": \"bmp\"\n};\n\nexports.defaultContentTypes = contentTypes({}, {});\n\n\nfunction readContentTypesFromXml(element) {\n    var extensionDefaults = {};\n    var overrides = {};\n    \n    element.children.forEach(function(child) {\n        if (child.name === \"content-types:Default\") {\n            extensionDefaults[child.attributes.Extension] = child.attributes.ContentType;\n        }\n        if (child.name === \"content-types:Override\") {\n            var name = child.attributes.PartName;\n            if (name.charAt(0) === \"/\") {\n                name = name.substring(1);\n            }\n            overrides[name] = child.attributes.ContentType;\n        }\n    });\n    return contentTypes(overrides, extensionDefaults);\n}\n\nfunction contentTypes(overrides, extensionDefaults) {\n    return {\n        findContentType: function(path) {\n            var overrideContentType = overrides[path];\n            if (overrideContentType) {\n                return overrideContentType;\n            } else {\n                var pathParts = path.split(\".\");\n                var extension = pathParts[pathParts.length - 1];\n                if (extensionDefaults.hasOwnProperty(extension)) {\n                    return extensionDefaults[extension];\n                } else {\n                    var fallback = fallbackContentTypes[extension.toLowerCase()];\n                    if (fallback) {\n                        return \"image/\" + fallback;\n                    } else {\n                        return null;\n                    }\n                }\n            }\n        }\n    };\n    \n}\n"]},"metadata":{},"sourceType":"script"}