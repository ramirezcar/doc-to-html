{"ast":null,"code":"var _ = require(\"underscore\");\n\nexports.Element = Element;\n\nexports.element = function (name, attributes, children) {\n  return new Element(name, attributes, children);\n};\n\nexports.text = function (value) {\n  return {\n    type: \"text\",\n    value: value\n  };\n};\n\nvar emptyElement = {\n  first: function first() {\n    return null;\n  },\n  firstOrEmpty: function firstOrEmpty() {\n    return emptyElement;\n  },\n  attributes: {}\n};\n\nfunction Element(name, attributes, children) {\n  this.type = \"element\";\n  this.name = name;\n  this.attributes = attributes || {};\n  this.children = children || [];\n}\n\nElement.prototype.first = function (name) {\n  return _.find(this.children, function (child) {\n    return child.name === name;\n  });\n};\n\nElement.prototype.firstOrEmpty = function (name) {\n  return this.first(name) || emptyElement;\n};\n\nElement.prototype.getElementsByTagName = function (name) {\n  var elements = _.filter(this.children, function (child) {\n    return child.name === name;\n  });\n\n  return toElementList(elements);\n};\n\nElement.prototype.text = function () {\n  if (this.children.length === 0) {\n    return \"\";\n  } else if (this.children.length !== 1 || this.children[0].type !== \"text\") {\n    throw new Error(\"Not implemented\");\n  }\n\n  return this.children[0].value;\n};\n\nvar elementListPrototype = {\n  getElementsByTagName: function getElementsByTagName(name) {\n    return toElementList(_.flatten(this.map(function (element) {\n      return element.getElementsByTagName(name);\n    }, true)));\n  }\n};\n\nfunction toElementList(array) {\n  return _.extend(array, elementListPrototype);\n}","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/xml/nodes.js"],"names":["_","require","exports","Element","element","name","attributes","children","text","value","type","emptyElement","first","firstOrEmpty","prototype","find","child","getElementsByTagName","elements","filter","toElementList","length","Error","elementListPrototype","flatten","map","array","extend"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,YAAD,CAAf;;AAGAC,OAAO,CAACC,OAAR,GAAkBA,OAAlB;;AACAD,OAAO,CAACE,OAAR,GAAkB,UAASC,IAAT,EAAeC,UAAf,EAA2BC,QAA3B,EAAqC;AACnD,SAAO,IAAIJ,OAAJ,CAAYE,IAAZ,EAAkBC,UAAlB,EAA8BC,QAA9B,CAAP;AACH,CAFD;;AAGAL,OAAO,CAACM,IAAR,GAAe,UAASC,KAAT,EAAgB;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAE,MADH;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALD;;AAQA,IAAIE,YAAY,GAAG;AACfC,EAAAA,KAAK,EAAE,iBAAW;AACd,WAAO,IAAP;AACH,GAHc;AAIfC,EAAAA,YAAY,EAAE,wBAAW;AACrB,WAAOF,YAAP;AACH,GANc;AAOfL,EAAAA,UAAU,EAAE;AAPG,CAAnB;;AAUA,SAASH,OAAT,CAAiBE,IAAjB,EAAuBC,UAAvB,EAAmCC,QAAnC,EAA6C;AACzC,OAAKG,IAAL,GAAY,SAAZ;AACA,OAAKL,IAAL,GAAYA,IAAZ;AACA,OAAKC,UAAL,GAAkBA,UAAU,IAAI,EAAhC;AACA,OAAKC,QAAL,GAAgBA,QAAQ,IAAI,EAA5B;AACH;;AAEDJ,OAAO,CAACW,SAAR,CAAkBF,KAAlB,GAA0B,UAASP,IAAT,EAAe;AACrC,SAAOL,CAAC,CAACe,IAAF,CAAO,KAAKR,QAAZ,EAAsB,UAASS,KAAT,EAAgB;AACzC,WAAOA,KAAK,CAACX,IAAN,KAAeA,IAAtB;AACH,GAFM,CAAP;AAGH,CAJD;;AAMAF,OAAO,CAACW,SAAR,CAAkBD,YAAlB,GAAiC,UAASR,IAAT,EAAe;AAC5C,SAAO,KAAKO,KAAL,CAAWP,IAAX,KAAoBM,YAA3B;AACH,CAFD;;AAIAR,OAAO,CAACW,SAAR,CAAkBG,oBAAlB,GAAyC,UAASZ,IAAT,EAAe;AACpD,MAAIa,QAAQ,GAAGlB,CAAC,CAACmB,MAAF,CAAS,KAAKZ,QAAd,EAAwB,UAASS,KAAT,EAAgB;AACnD,WAAOA,KAAK,CAACX,IAAN,KAAeA,IAAtB;AACH,GAFc,CAAf;;AAGA,SAAOe,aAAa,CAACF,QAAD,CAApB;AACH,CALD;;AAOAf,OAAO,CAACW,SAAR,CAAkBN,IAAlB,GAAyB,YAAW;AAChC,MAAI,KAAKD,QAAL,CAAcc,MAAd,KAAyB,CAA7B,EAAgC;AAC5B,WAAO,EAAP;AACH,GAFD,MAEO,IAAI,KAAKd,QAAL,CAAcc,MAAd,KAAyB,CAAzB,IAA8B,KAAKd,QAAL,CAAc,CAAd,EAAiBG,IAAjB,KAA0B,MAA5D,EAAoE;AACvE,UAAM,IAAIY,KAAJ,CAAU,iBAAV,CAAN;AACH;;AACD,SAAO,KAAKf,QAAL,CAAc,CAAd,EAAiBE,KAAxB;AACH,CAPD;;AASA,IAAIc,oBAAoB,GAAG;AACvBN,EAAAA,oBAAoB,EAAE,8BAASZ,IAAT,EAAe;AACjC,WAAOe,aAAa,CAACpB,CAAC,CAACwB,OAAF,CAAU,KAAKC,GAAL,CAAS,UAASrB,OAAT,EAAkB;AACtD,aAAOA,OAAO,CAACa,oBAAR,CAA6BZ,IAA7B,CAAP;AACH,KAF8B,EAE5B,IAF4B,CAAV,CAAD,CAApB;AAGH;AALsB,CAA3B;;AAQA,SAASe,aAAT,CAAuBM,KAAvB,EAA8B;AAC1B,SAAO1B,CAAC,CAAC2B,MAAF,CAASD,KAAT,EAAgBH,oBAAhB,CAAP;AACH","sourcesContent":["var _ = require(\"underscore\");\n\n\nexports.Element = Element;\nexports.element = function(name, attributes, children) {\n    return new Element(name, attributes, children);\n};\nexports.text = function(value) {\n    return {\n        type: \"text\",\n        value: value\n    };\n};\n\n\nvar emptyElement = {\n    first: function() {\n        return null;\n    },\n    firstOrEmpty: function() {\n        return emptyElement;\n    },\n    attributes: {}\n};\n\nfunction Element(name, attributes, children) {\n    this.type = \"element\";\n    this.name = name;\n    this.attributes = attributes || {};\n    this.children = children || [];\n}\n\nElement.prototype.first = function(name) {\n    return _.find(this.children, function(child) {\n        return child.name === name;\n    });\n};\n\nElement.prototype.firstOrEmpty = function(name) {\n    return this.first(name) || emptyElement;\n};\n\nElement.prototype.getElementsByTagName = function(name) {\n    var elements = _.filter(this.children, function(child) {\n        return child.name === name;\n    });\n    return toElementList(elements);\n};\n\nElement.prototype.text = function() {\n    if (this.children.length === 0) {\n        return \"\";\n    } else if (this.children.length !== 1 || this.children[0].type !== \"text\") {\n        throw new Error(\"Not implemented\");\n    }\n    return this.children[0].value;\n};\n\nvar elementListPrototype = {\n    getElementsByTagName: function(name) {\n        return toElementList(_.flatten(this.map(function(element) {\n            return element.getElementsByTagName(name);\n        }, true)));\n    }\n};\n\nfunction toElementList(array) {\n    return _.extend(array, elementListPrototype);\n}\n"]},"metadata":{},"sourceType":"script"}