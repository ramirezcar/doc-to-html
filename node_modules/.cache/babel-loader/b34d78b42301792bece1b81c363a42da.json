{"ast":null,"code":"var _ = require(\"underscore\");\n\nvar promises = require(\"../promises\");\n\nvar xml = require(\"../xml\");\n\nexports.writeStyleMap = writeStyleMap;\nexports.readStyleMap = readStyleMap;\nvar schema = \"http://schemas.zwobble.org/mammoth/style-map\";\nvar styleMapPath = \"mammoth/style-map\";\nvar styleMapAbsolutePath = \"/\" + styleMapPath;\n\nfunction writeStyleMap(docxFile, styleMap) {\n  docxFile.write(styleMapPath, styleMap);\n  return updateRelationships(docxFile).then(function () {\n    return updateContentTypes(docxFile);\n  });\n}\n\nfunction updateRelationships(docxFile) {\n  var path = \"word/_rels/document.xml.rels\";\n  var relationshipsUri = \"http://schemas.openxmlformats.org/package/2006/relationships\";\n  var relationshipElementName = \"{\" + relationshipsUri + \"}Relationship\";\n  return docxFile.read(path, \"utf8\").then(xml.readString).then(function (relationshipsContainer) {\n    var relationships = relationshipsContainer.children;\n    addOrUpdateElement(relationships, relationshipElementName, \"Id\", {\n      \"Id\": \"rMammothStyleMap\",\n      \"Type\": schema,\n      \"Target\": styleMapAbsolutePath\n    });\n    var namespaces = {\n      \"\": relationshipsUri\n    };\n    return docxFile.write(path, xml.writeString(relationshipsContainer, namespaces));\n  });\n}\n\nfunction updateContentTypes(docxFile) {\n  var path = \"[Content_Types].xml\";\n  var contentTypesUri = \"http://schemas.openxmlformats.org/package/2006/content-types\";\n  var overrideName = \"{\" + contentTypesUri + \"}Override\";\n  return docxFile.read(path, \"utf8\").then(xml.readString).then(function (typesElement) {\n    var children = typesElement.children;\n    addOrUpdateElement(children, overrideName, \"PartName\", {\n      \"PartName\": styleMapAbsolutePath,\n      \"ContentType\": \"text/prs.mammoth.style-map\"\n    });\n    var namespaces = {\n      \"\": contentTypesUri\n    };\n    return docxFile.write(path, xml.writeString(typesElement, namespaces));\n  });\n}\n\nfunction addOrUpdateElement(elements, name, identifyingAttribute, attributes) {\n  var existingElement = _.find(elements, function (element) {\n    return element.name === name && element.attributes[identifyingAttribute] === attributes[identifyingAttribute];\n  });\n\n  if (existingElement) {\n    existingElement.attributes = attributes;\n  } else {\n    elements.push(xml.element(name, attributes));\n  }\n}\n\nfunction readStyleMap(docxFile) {\n  if (docxFile.exists(styleMapPath)) {\n    return docxFile.read(styleMapPath, \"utf8\");\n  } else {\n    return promises.resolve(null);\n  }\n}","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/docx/style-map.js"],"names":["_","require","promises","xml","exports","writeStyleMap","readStyleMap","schema","styleMapPath","styleMapAbsolutePath","docxFile","styleMap","write","updateRelationships","then","updateContentTypes","path","relationshipsUri","relationshipElementName","read","readString","relationshipsContainer","relationships","children","addOrUpdateElement","namespaces","writeString","contentTypesUri","overrideName","typesElement","elements","name","identifyingAttribute","attributes","existingElement","find","element","push","exists","resolve"],"mappings":"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","sourcesContent":["var _ = require(\"underscore\");\n\nvar promises = require(\"../promises\");\nvar xml = require(\"../xml\");\n\nexports.writeStyleMap = writeStyleMap;\nexports.readStyleMap = readStyleMap;\n\n\nvar schema = \"http://schemas.zwobble.org/mammoth/style-map\";\nvar styleMapPath = \"mammoth/style-map\";\nvar styleMapAbsolutePath = \"/\" + styleMapPath;\n\nfunction writeStyleMap(docxFile, styleMap) {\n    docxFile.write(styleMapPath, styleMap);\n    return updateRelationships(docxFile).then(function() {\n        return updateContentTypes(docxFile);\n    });\n}\n\nfunction updateRelationships(docxFile) {\n    var path = \"word/_rels/document.xml.rels\";\n    var relationshipsUri = \"http://schemas.openxmlformats.org/package/2006/relationships\";\n    var relationshipElementName = \"{\" + relationshipsUri + \"}Relationship\";\n    return docxFile.read(path, \"utf8\")\n        .then(xml.readString)\n        .then(function(relationshipsContainer) {\n            var relationships = relationshipsContainer.children;\n            addOrUpdateElement(relationships, relationshipElementName, \"Id\", {\n                \"Id\": \"rMammothStyleMap\",\n                \"Type\": schema,\n                \"Target\": styleMapAbsolutePath\n            });\n            \n            var namespaces = {\"\": relationshipsUri};\n            return docxFile.write(path, xml.writeString(relationshipsContainer, namespaces));\n        });\n}\n\nfunction updateContentTypes(docxFile) {\n    var path = \"[Content_Types].xml\";\n    var contentTypesUri = \"http://schemas.openxmlformats.org/package/2006/content-types\";\n    var overrideName = \"{\" + contentTypesUri + \"}Override\";\n    return docxFile.read(path, \"utf8\")\n        .then(xml.readString)\n        .then(function(typesElement) {\n            var children = typesElement.children;\n            addOrUpdateElement(children, overrideName, \"PartName\", {\n                \"PartName\": styleMapAbsolutePath,\n                \"ContentType\": \"text/prs.mammoth.style-map\"\n            });\n            var namespaces = {\"\": contentTypesUri};\n            return docxFile.write(path, xml.writeString(typesElement, namespaces));\n        });\n}\n\nfunction addOrUpdateElement(elements, name, identifyingAttribute, attributes) {\n    var existingElement = _.find(elements, function(element) {\n        return element.name === name &&\n            element.attributes[identifyingAttribute] === attributes[identifyingAttribute];\n    });\n    if (existingElement) {\n        existingElement.attributes = attributes;\n    } else {\n        elements.push(xml.element(name, attributes));\n    }\n}\n\nfunction readStyleMap(docxFile) {\n    if (docxFile.exists(styleMapPath)) {\n        return docxFile.read(styleMapPath, \"utf8\");\n    } else {\n        return promises.resolve(null);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}