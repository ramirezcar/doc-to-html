{"ast":null,"code":"var _ = require(\"underscore\");\n\nvar promises = require(\"./promises\");\n\nvar documents = require(\"./documents\");\n\nvar htmlPaths = require(\"./styles/html-paths\");\n\nvar results = require(\"./results\");\n\nvar images = require(\"./images\");\n\nvar Html = require(\"./html\");\n\nvar writers = require(\"./writers\");\n\nexports.DocumentConverter = DocumentConverter;\n\nfunction DocumentConverter(options) {\n  return {\n    convertToHtml: function convertToHtml(element) {\n      var comments = _.indexBy(element.type === documents.types.document ? element.comments : [], \"commentId\");\n\n      var conversion = new DocumentConversion(options, comments);\n      return conversion.convertToHtml(element);\n    }\n  };\n}\n\nfunction DocumentConversion(options, comments) {\n  var noteNumber = 1;\n  var noteReferences = [];\n  var referencedComments = [];\n  options = _.extend({\n    ignoreEmptyParagraphs: true\n  }, options);\n  var idPrefix = options.idPrefix === undefined ? \"\" : options.idPrefix;\n  var ignoreEmptyParagraphs = options.ignoreEmptyParagraphs;\n  var defaultParagraphStyle = htmlPaths.topLevelElement(\"p\");\n  var styleMap = options.styleMap || [];\n\n  function convertToHtml(document) {\n    var messages = [];\n    var html = elementToHtml(document, messages, {});\n    var deferredNodes = [];\n    walkHtml(html, function (node) {\n      if (node.type === \"deferred\") {\n        deferredNodes.push(node);\n      }\n    });\n    var deferredValues = {};\n    return promises.mapSeries(deferredNodes, function (deferred) {\n      return deferred.value().then(function (value) {\n        deferredValues[deferred.id] = value;\n      });\n    }).then(function () {\n      function replaceDeferred(nodes) {\n        return flatMap(nodes, function (node) {\n          if (node.type === \"deferred\") {\n            return deferredValues[node.id];\n          } else if (node.children) {\n            return [_.extend({}, node, {\n              children: replaceDeferred(node.children)\n            })];\n          } else {\n            return [node];\n          }\n        });\n      }\n\n      var writer = writers.writer({\n        prettyPrint: options.prettyPrint,\n        outputFormat: options.outputFormat\n      });\n      Html.write(writer, Html.simplify(replaceDeferred(html)));\n      return new results.Result(writer.asString(), messages);\n    });\n  }\n\n  function convertElements(elements, messages, options) {\n    return flatMap(elements, function (element) {\n      return elementToHtml(element, messages, options);\n    });\n  }\n\n  function elementToHtml(element, messages, options) {\n    if (!options) {\n      throw new Error(\"options not set\");\n    }\n\n    var handler = elementConverters[element.type];\n\n    if (handler) {\n      return handler(element, messages, options);\n    } else {\n      return [];\n    }\n  }\n\n  function convertParagraph(element, messages, options) {\n    return htmlPathForParagraph(element, messages).wrap(function () {\n      var content = convertElements(element.children, messages, options);\n\n      if (ignoreEmptyParagraphs) {\n        return content;\n      } else {\n        return [Html.forceWrite].concat(content);\n      }\n    });\n  }\n\n  function htmlPathForParagraph(element, messages) {\n    var style = findStyle(element);\n\n    if (style) {\n      return style.to;\n    } else {\n      if (element.styleId) {\n        messages.push(unrecognisedStyleWarning(\"paragraph\", element));\n      }\n\n      return defaultParagraphStyle;\n    }\n  }\n\n  function convertRun(run, messages, options) {\n    var nodes = function nodes() {\n      return convertElements(run.children, messages, options);\n    };\n\n    var paths = [];\n\n    if (run.isSmallCaps) {\n      paths.push(findHtmlPathForRunProperty(\"smallCaps\"));\n    }\n\n    if (run.isAllCaps) {\n      paths.push(findHtmlPathForRunProperty(\"allCaps\"));\n    }\n\n    if (run.isStrikethrough) {\n      paths.push(findHtmlPathForRunProperty(\"strikethrough\", \"s\"));\n    }\n\n    if (run.isUnderline) {\n      paths.push(findHtmlPathForRunProperty(\"underline\"));\n    }\n\n    if (run.verticalAlignment === documents.verticalAlignment.subscript) {\n      paths.push(htmlPaths.element(\"sub\", {}, {\n        fresh: false\n      }));\n    }\n\n    if (run.verticalAlignment === documents.verticalAlignment.superscript) {\n      paths.push(htmlPaths.element(\"sup\", {}, {\n        fresh: false\n      }));\n    }\n\n    if (run.isItalic) {\n      paths.push(findHtmlPathForRunProperty(\"italic\", \"em\"));\n    }\n\n    if (run.isBold) {\n      paths.push(findHtmlPathForRunProperty(\"bold\", \"strong\"));\n    }\n\n    var stylePath = htmlPaths.empty;\n    var style = findStyle(run);\n\n    if (style) {\n      stylePath = style.to;\n    } else if (run.styleId) {\n      messages.push(unrecognisedStyleWarning(\"run\", run));\n    }\n\n    paths.push(stylePath);\n    paths.forEach(function (path) {\n      nodes = path.wrap.bind(path, nodes);\n    });\n    return nodes();\n  }\n\n  function findHtmlPathForRunProperty(elementType, defaultTagName) {\n    var path = findHtmlPath({\n      type: elementType\n    });\n\n    if (path) {\n      return path;\n    } else if (defaultTagName) {\n      return htmlPaths.element(defaultTagName, {}, {\n        fresh: false\n      });\n    } else {\n      return htmlPaths.empty;\n    }\n  }\n\n  function findHtmlPath(element, defaultPath) {\n    var style = findStyle(element);\n    return style ? style.to : defaultPath;\n  }\n\n  function findStyle(element) {\n    for (var i = 0; i < styleMap.length; i++) {\n      if (styleMap[i].from.matches(element)) {\n        return styleMap[i];\n      }\n    }\n  }\n\n  function recoveringConvertImage(convertImage) {\n    return function (image, messages) {\n      return promises.attempt(function () {\n        return convertImage(image, messages);\n      }).caught(function (error) {\n        messages.push(results.error(error));\n        return [];\n      });\n    };\n  }\n\n  function noteHtmlId(note) {\n    return referentHtmlId(note.noteType, note.noteId);\n  }\n\n  function noteRefHtmlId(note) {\n    return referenceHtmlId(note.noteType, note.noteId);\n  }\n\n  function referentHtmlId(referenceType, referenceId) {\n    return htmlId(referenceType + \"-\" + referenceId);\n  }\n\n  function referenceHtmlId(referenceType, referenceId) {\n    return htmlId(referenceType + \"-ref-\" + referenceId);\n  }\n\n  function htmlId(suffix) {\n    return idPrefix + suffix;\n  }\n\n  var defaultTablePath = htmlPaths.elements([htmlPaths.element(\"table\", {}, {\n    fresh: true\n  })]);\n\n  function convertTable(element, messages, options) {\n    return findHtmlPath(element, defaultTablePath).wrap(function () {\n      return convertTableChildren(element, messages, options);\n    });\n  }\n\n  function convertTableChildren(element, messages, options) {\n    var bodyIndex = _.findIndex(element.children, function (child) {\n      return !child.type === documents.types.tableRow || !child.isHeader;\n    });\n\n    if (bodyIndex === -1) {\n      bodyIndex = element.children.length;\n    }\n\n    var children;\n\n    if (bodyIndex === 0) {\n      children = convertElements(element.children, messages, _.extend({}, options, {\n        isTableHeader: false\n      }));\n    } else {\n      var headRows = convertElements(element.children.slice(0, bodyIndex), messages, _.extend({}, options, {\n        isTableHeader: true\n      }));\n      var bodyRows = convertElements(element.children.slice(bodyIndex), messages, _.extend({}, options, {\n        isTableHeader: false\n      }));\n      children = [Html.freshElement(\"thead\", {}, headRows), Html.freshElement(\"tbody\", {}, bodyRows)];\n    }\n\n    return [Html.forceWrite].concat(children);\n  }\n\n  function convertTableRow(element, messages, options) {\n    var children = convertElements(element.children, messages, options);\n    return [Html.freshElement(\"tr\", {}, [Html.forceWrite].concat(children))];\n  }\n\n  function convertTableCell(element, messages, options) {\n    var tagName = options.isTableHeader ? \"th\" : \"td\";\n    var children = convertElements(element.children, messages, options);\n    var attributes = {};\n\n    if (element.colSpan !== 1) {\n      attributes.colspan = element.colSpan.toString();\n    }\n\n    if (element.rowSpan !== 1) {\n      attributes.rowspan = element.rowSpan.toString();\n    }\n\n    return [Html.freshElement(tagName, attributes, [Html.forceWrite].concat(children))];\n  }\n\n  function convertCommentReference(reference, messages, options) {\n    return findHtmlPath(reference, htmlPaths.ignore).wrap(function () {\n      var comment = comments[reference.commentId];\n      var count = referencedComments.length + 1;\n      var label = \"[\" + commentAuthorLabel(comment) + count + \"]\";\n      referencedComments.push({\n        label: label,\n        comment: comment\n      }); // TODO: remove duplication with note references\n\n      return [Html.freshElement(\"a\", {\n        href: \"#\" + referentHtmlId(\"comment\", reference.commentId),\n        id: referenceHtmlId(\"comment\", reference.commentId)\n      }, [Html.text(label)])];\n    });\n  }\n\n  function convertComment(referencedComment, messages, options) {\n    // TODO: remove duplication with note references\n    var label = referencedComment.label;\n    var comment = referencedComment.comment;\n    var body = convertElements(comment.body, messages, options).concat([Html.nonFreshElement(\"p\", {}, [Html.text(\" \"), Html.freshElement(\"a\", {\n      \"href\": \"#\" + referenceHtmlId(\"comment\", comment.commentId)\n    }, [Html.text(\"â†‘\")])])]);\n    return [Html.freshElement(\"dt\", {\n      \"id\": referentHtmlId(\"comment\", comment.commentId)\n    }, [Html.text(\"Comment \" + label)]), Html.freshElement(\"dd\", {}, body)];\n  }\n\n  function convertBreak(element, messages, options) {\n    return htmlPathForBreak(element).wrap(function () {\n      return [];\n    });\n  }\n\n  function htmlPathForBreak(element) {\n    var style = findStyle(element);\n\n    if (style) {\n      return style.to;\n    } else if (element.breakType === \"line\") {\n      return htmlPaths.topLevelElement(\"br\");\n    } else {\n      return htmlPaths.empty;\n    }\n  }\n\n  var elementConverters = {\n    \"document\": function document(_document, messages, options) {\n      var children = convertElements(_document.children, messages, options);\n      var notes = noteReferences.map(function (noteReference) {\n        return _document.notes.resolve(noteReference);\n      });\n      var notesNodes = convertElements(notes, messages, options);\n      return children.concat([Html.freshElement(\"ol\", {}, notesNodes), Html.freshElement(\"dl\", {}, flatMap(referencedComments, function (referencedComment) {\n        return convertComment(referencedComment, messages, options);\n      }))]);\n    },\n    \"paragraph\": convertParagraph,\n    \"run\": convertRun,\n    \"text\": function text(element, messages, options) {\n      return [Html.text(element.value)];\n    },\n    \"tab\": function tab(element, messages, options) {\n      return [Html.text(\"\\t\")];\n    },\n    \"hyperlink\": function hyperlink(element, messages, options) {\n      var href = element.anchor ? \"#\" + htmlId(element.anchor) : element.href;\n      var attributes = {\n        href: href\n      };\n\n      if (element.targetFrame != null) {\n        attributes.target = element.targetFrame;\n      }\n\n      var children = convertElements(element.children, messages, options);\n      return [Html.nonFreshElement(\"a\", attributes, children)];\n    },\n    \"bookmarkStart\": function bookmarkStart(element, messages, options) {\n      var anchor = Html.freshElement(\"a\", {\n        id: htmlId(element.name)\n      }, [Html.forceWrite]);\n      return [anchor];\n    },\n    \"noteReference\": function noteReference(element, messages, options) {\n      noteReferences.push(element);\n      var anchor = Html.freshElement(\"a\", {\n        href: \"#\" + noteHtmlId(element),\n        id: noteRefHtmlId(element)\n      }, [Html.text(\"[\" + noteNumber++ + \"]\")]);\n      return [Html.freshElement(\"sup\", {}, [anchor])];\n    },\n    \"note\": function note(element, messages, options) {\n      var children = convertElements(element.body, messages, options);\n      var backLink = Html.elementWithTag(htmlPaths.element(\"p\", {}, {\n        fresh: false\n      }), [Html.text(\" \"), Html.freshElement(\"a\", {\n        href: \"#\" + noteRefHtmlId(element)\n      }, [Html.text(\"â†‘\")])]);\n      var body = children.concat([backLink]);\n      return Html.freshElement(\"li\", {\n        id: noteHtmlId(element)\n      }, body);\n    },\n    \"commentReference\": convertCommentReference,\n    \"comment\": convertComment,\n    \"image\": deferredConversion(recoveringConvertImage(options.convertImage || images.dataUri)),\n    \"table\": convertTable,\n    \"tableRow\": convertTableRow,\n    \"tableCell\": convertTableCell,\n    \"break\": convertBreak\n  };\n  return {\n    convertToHtml: convertToHtml\n  };\n}\n\nvar deferredId = 1;\n\nfunction deferredConversion(func) {\n  return function (element, messages, options) {\n    return [{\n      type: \"deferred\",\n      id: deferredId++,\n      value: function value() {\n        return func(element, messages, options);\n      }\n    }];\n  };\n}\n\nfunction unrecognisedStyleWarning(type, element) {\n  return results.warning(\"Unrecognised \" + type + \" style: '\" + element.styleName + \"'\" + \" (Style ID: \" + element.styleId + \")\");\n}\n\nfunction flatMap(values, func) {\n  return _.flatten(values.map(func), true);\n}\n\nfunction walkHtml(nodes, callback) {\n  nodes.forEach(function (node) {\n    callback(node);\n\n    if (node.children) {\n      walkHtml(node.children, callback);\n    }\n  });\n}\n\nvar commentAuthorLabel = exports.commentAuthorLabel = function commentAuthorLabel(comment) {\n  return comment.authorInitials || \"\";\n};","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/document-to-html.js"],"names":["_","require","promises","documents","htmlPaths","results","images","Html","writers","exports","DocumentConverter","options","convertToHtml","element","comments","indexBy","type","types","document","conversion","DocumentConversion","noteNumber","noteReferences","referencedComments","extend","ignoreEmptyParagraphs","idPrefix","undefined","defaultParagraphStyle","topLevelElement","styleMap","messages","html","elementToHtml","deferredNodes","walkHtml","node","push","deferredValues","mapSeries","deferred","value","then","id","replaceDeferred","nodes","flatMap","children","writer","prettyPrint","outputFormat","write","simplify","Result","asString","convertElements","elements","Error","handler","elementConverters","convertParagraph","htmlPathForParagraph","wrap","content","forceWrite","concat","style","findStyle","to","styleId","unrecognisedStyleWarning","convertRun","run","paths","isSmallCaps","findHtmlPathForRunProperty","isAllCaps","isStrikethrough","isUnderline","verticalAlignment","subscript","fresh","superscript","isItalic","isBold","stylePath","empty","forEach","path","bind","elementType","defaultTagName","findHtmlPath","defaultPath","i","length","from","matches","recoveringConvertImage","convertImage","image","attempt","caught","error","noteHtmlId","note","referentHtmlId","noteType","noteId","noteRefHtmlId","referenceHtmlId","referenceType","referenceId","htmlId","suffix","defaultTablePath","convertTable","convertTableChildren","bodyIndex","findIndex","child","tableRow","isHeader","isTableHeader","headRows","slice","bodyRows","freshElement","convertTableRow","convertTableCell","tagName","attributes","colSpan","colspan","toString","rowSpan","rowspan","convertCommentReference","reference","ignore","comment","commentId","count","label","commentAuthorLabel","href","text","convertComment","referencedComment","body","nonFreshElement","convertBreak","htmlPathForBreak","breakType","notes","map","noteReference","resolve","notesNodes","anchor","targetFrame","target","name","backLink","elementWithTag","deferredConversion","dataUri","deferredId","func","warning","styleName","values","flatten","callback","authorInitials"],"mappings":"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","sourcesContent":["var _ = require(\"underscore\");\n\nvar promises = require(\"./promises\");\nvar documents = require(\"./documents\");\nvar htmlPaths = require(\"./styles/html-paths\");\nvar results = require(\"./results\");\nvar images = require(\"./images\");\nvar Html = require(\"./html\");\nvar writers = require(\"./writers\");\n\nexports.DocumentConverter = DocumentConverter;\n\n\nfunction DocumentConverter(options) {\n    return {\n        convertToHtml: function(element) {\n            var comments = _.indexBy(\n                element.type === documents.types.document ? element.comments : [],\n                \"commentId\"\n            );\n            var conversion = new DocumentConversion(options, comments);\n            return conversion.convertToHtml(element);\n        }\n    };\n}\n\nfunction DocumentConversion(options, comments) {\n    var noteNumber = 1;\n\n    var noteReferences = [];\n\n    var referencedComments = [];\n\n    options = _.extend({ignoreEmptyParagraphs: true}, options);\n    var idPrefix = options.idPrefix === undefined ? \"\" : options.idPrefix;\n    var ignoreEmptyParagraphs = options.ignoreEmptyParagraphs;\n\n    var defaultParagraphStyle = htmlPaths.topLevelElement(\"p\");\n\n    var styleMap = options.styleMap || [];\n\n    function convertToHtml(document) {\n        var messages = [];\n\n        var html = elementToHtml(document, messages, {});\n\n        var deferredNodes = [];\n        walkHtml(html, function(node) {\n            if (node.type === \"deferred\") {\n                deferredNodes.push(node);\n            }\n        });\n        var deferredValues = {};\n        return promises.mapSeries(deferredNodes, function(deferred) {\n            return deferred.value().then(function(value) {\n                deferredValues[deferred.id] = value;\n            });\n        }).then(function() {\n            function replaceDeferred(nodes) {\n                return flatMap(nodes, function(node) {\n                    if (node.type === \"deferred\") {\n                        return deferredValues[node.id];\n                    } else if (node.children) {\n                        return [\n                            _.extend({}, node, {\n                                children: replaceDeferred(node.children)\n                            })\n                        ];\n                    } else {\n                        return [node];\n                    }\n                });\n            }\n            var writer = writers.writer({\n                prettyPrint: options.prettyPrint,\n                outputFormat: options.outputFormat\n            });\n            Html.write(writer, Html.simplify(replaceDeferred(html)));\n            return new results.Result(writer.asString(), messages);\n        });\n    }\n\n    function convertElements(elements, messages, options) {\n        return flatMap(elements, function(element) {\n            return elementToHtml(element, messages, options);\n        });\n    }\n\n    function elementToHtml(element, messages, options) {\n        if (!options) {\n            throw new Error(\"options not set\");\n        }\n        var handler = elementConverters[element.type];\n        if (handler) {\n            return handler(element, messages, options);\n        } else {\n            return [];\n        }\n    }\n\n    function convertParagraph(element, messages, options) {\n        return htmlPathForParagraph(element, messages).wrap(function() {\n            var content = convertElements(element.children, messages, options);\n            if (ignoreEmptyParagraphs) {\n                return content;\n            } else {\n                return [Html.forceWrite].concat(content);\n            }\n        });\n    }\n\n    function htmlPathForParagraph(element, messages) {\n        var style = findStyle(element);\n\n        if (style) {\n            return style.to;\n        } else {\n            if (element.styleId) {\n                messages.push(unrecognisedStyleWarning(\"paragraph\", element));\n            }\n            return defaultParagraphStyle;\n        }\n    }\n\n    function convertRun(run, messages, options) {\n        var nodes = function() {\n            return convertElements(run.children, messages, options);\n        };\n        var paths = [];\n        if (run.isSmallCaps) {\n            paths.push(findHtmlPathForRunProperty(\"smallCaps\"));\n        }\n        if (run.isAllCaps) {\n            paths.push(findHtmlPathForRunProperty(\"allCaps\"));\n        }\n        if (run.isStrikethrough) {\n            paths.push(findHtmlPathForRunProperty(\"strikethrough\", \"s\"));\n        }\n        if (run.isUnderline) {\n            paths.push(findHtmlPathForRunProperty(\"underline\"));\n        }\n        if (run.verticalAlignment === documents.verticalAlignment.subscript) {\n            paths.push(htmlPaths.element(\"sub\", {}, {fresh: false}));\n        }\n        if (run.verticalAlignment === documents.verticalAlignment.superscript) {\n            paths.push(htmlPaths.element(\"sup\", {}, {fresh: false}));\n        }\n        if (run.isItalic) {\n            paths.push(findHtmlPathForRunProperty(\"italic\", \"em\"));\n        }\n        if (run.isBold) {\n            paths.push(findHtmlPathForRunProperty(\"bold\", \"strong\"));\n        }\n        var stylePath = htmlPaths.empty;\n        var style = findStyle(run);\n        if (style) {\n            stylePath = style.to;\n        } else if (run.styleId) {\n            messages.push(unrecognisedStyleWarning(\"run\", run));\n        }\n        paths.push(stylePath);\n\n        paths.forEach(function(path) {\n            nodes = path.wrap.bind(path, nodes);\n        });\n\n        return nodes();\n    }\n\n    function findHtmlPathForRunProperty(elementType, defaultTagName) {\n        var path = findHtmlPath({type: elementType});\n        if (path) {\n            return path;\n        } else if (defaultTagName) {\n            return htmlPaths.element(defaultTagName, {}, {fresh: false});\n        } else {\n            return htmlPaths.empty;\n        }\n    }\n\n    function findHtmlPath(element, defaultPath) {\n        var style = findStyle(element);\n        return style ? style.to : defaultPath;\n    }\n\n    function findStyle(element) {\n        for (var i = 0; i < styleMap.length; i++) {\n            if (styleMap[i].from.matches(element)) {\n                return styleMap[i];\n            }\n        }\n    }\n\n    function recoveringConvertImage(convertImage) {\n        return function(image, messages) {\n            return promises.attempt(function() {\n                return convertImage(image, messages);\n            }).caught(function(error) {\n                messages.push(results.error(error));\n                return [];\n            });\n        };\n    }\n\n    function noteHtmlId(note) {\n        return referentHtmlId(note.noteType, note.noteId);\n    }\n\n    function noteRefHtmlId(note) {\n        return referenceHtmlId(note.noteType, note.noteId);\n    }\n\n    function referentHtmlId(referenceType, referenceId) {\n        return htmlId(referenceType + \"-\" + referenceId);\n    }\n\n    function referenceHtmlId(referenceType, referenceId) {\n        return htmlId(referenceType + \"-ref-\" + referenceId);\n    }\n\n    function htmlId(suffix) {\n        return idPrefix + suffix;\n    }\n\n    var defaultTablePath = htmlPaths.elements([\n        htmlPaths.element(\"table\", {}, {fresh: true})\n    ]);\n\n    function convertTable(element, messages, options) {\n        return findHtmlPath(element, defaultTablePath).wrap(function() {\n            return convertTableChildren(element, messages, options);\n        });\n    }\n\n    function convertTableChildren(element, messages, options) {\n        var bodyIndex = _.findIndex(element.children, function(child) {\n            return !child.type === documents.types.tableRow || !child.isHeader;\n        });\n        if (bodyIndex === -1) {\n            bodyIndex = element.children.length;\n        }\n        var children;\n        if (bodyIndex === 0) {\n            children = convertElements(\n                element.children,\n                messages,\n                _.extend({}, options, {isTableHeader: false})\n            );\n        } else {\n            var headRows = convertElements(\n                element.children.slice(0, bodyIndex),\n                messages,\n                _.extend({}, options, {isTableHeader: true})\n            );\n            var bodyRows = convertElements(\n                element.children.slice(bodyIndex),\n                messages,\n                _.extend({}, options, {isTableHeader: false})\n            );\n            children = [\n                Html.freshElement(\"thead\", {}, headRows),\n                Html.freshElement(\"tbody\", {}, bodyRows)\n            ];\n        }\n        return [Html.forceWrite].concat(children);\n    }\n\n    function convertTableRow(element, messages, options) {\n        var children = convertElements(element.children, messages, options);\n        return [\n            Html.freshElement(\"tr\", {}, [Html.forceWrite].concat(children))\n        ];\n    }\n\n    function convertTableCell(element, messages, options) {\n        var tagName = options.isTableHeader ? \"th\" : \"td\";\n        var children = convertElements(element.children, messages, options);\n        var attributes = {};\n        if (element.colSpan !== 1) {\n            attributes.colspan = element.colSpan.toString();\n        }\n        if (element.rowSpan !== 1) {\n            attributes.rowspan = element.rowSpan.toString();\n        }\n\n        return [\n            Html.freshElement(tagName, attributes, [Html.forceWrite].concat(children))\n        ];\n    }\n\n    function convertCommentReference(reference, messages, options) {\n        return findHtmlPath(reference, htmlPaths.ignore).wrap(function() {\n            var comment = comments[reference.commentId];\n            var count = referencedComments.length + 1;\n            var label = \"[\" + commentAuthorLabel(comment) + count + \"]\";\n            referencedComments.push({label: label, comment: comment});\n            // TODO: remove duplication with note references\n            return [\n                Html.freshElement(\"a\", {\n                    href: \"#\" + referentHtmlId(\"comment\", reference.commentId),\n                    id: referenceHtmlId(\"comment\", reference.commentId)\n                }, [Html.text(label)])\n            ];\n        });\n    }\n\n    function convertComment(referencedComment, messages, options) {\n        // TODO: remove duplication with note references\n\n        var label = referencedComment.label;\n        var comment = referencedComment.comment;\n        var body = convertElements(comment.body, messages, options).concat([\n            Html.nonFreshElement(\"p\", {}, [\n                Html.text(\" \"),\n                Html.freshElement(\"a\", {\"href\": \"#\" + referenceHtmlId(\"comment\", comment.commentId)}, [\n                    Html.text(\"â†‘\")\n                ])\n            ])\n        ]);\n\n        return [\n            Html.freshElement(\n                \"dt\",\n                {\"id\": referentHtmlId(\"comment\", comment.commentId)},\n                [Html.text(\"Comment \" + label)]\n            ),\n            Html.freshElement(\"dd\", {}, body)\n        ];\n    }\n\n    function convertBreak(element, messages, options) {\n        return htmlPathForBreak(element).wrap(function() {\n            return [];\n        });\n    }\n\n    function htmlPathForBreak(element) {\n        var style = findStyle(element);\n        if (style) {\n            return style.to;\n        } else if (element.breakType === \"line\") {\n            return htmlPaths.topLevelElement(\"br\");\n        } else {\n            return htmlPaths.empty;\n        }\n    }\n\n    var elementConverters = {\n        \"document\": function(document, messages, options) {\n            var children = convertElements(document.children, messages, options);\n            var notes = noteReferences.map(function(noteReference) {\n                return document.notes.resolve(noteReference);\n            });\n            var notesNodes = convertElements(notes, messages, options);\n            return children.concat([\n                Html.freshElement(\"ol\", {}, notesNodes),\n                Html.freshElement(\"dl\", {}, flatMap(referencedComments, function(referencedComment) {\n                    return convertComment(referencedComment, messages, options);\n                }))\n            ]);\n        },\n        \"paragraph\": convertParagraph,\n        \"run\": convertRun,\n        \"text\": function(element, messages, options) {\n            return [Html.text(element.value)];\n        },\n        \"tab\": function(element, messages, options) {\n            return [Html.text(\"\\t\")];\n        },\n        \"hyperlink\": function(element, messages, options) {\n            var href = element.anchor ? \"#\" + htmlId(element.anchor) : element.href;\n            var attributes = {href: href};\n            if (element.targetFrame != null) {\n                attributes.target = element.targetFrame;\n            }\n\n            var children = convertElements(element.children, messages, options);\n            return [Html.nonFreshElement(\"a\", attributes, children)];\n        },\n        \"bookmarkStart\": function(element, messages, options) {\n            var anchor = Html.freshElement(\"a\", {\n                id: htmlId(element.name)\n            }, [Html.forceWrite]);\n            return [anchor];\n        },\n        \"noteReference\": function(element, messages, options) {\n            noteReferences.push(element);\n            var anchor = Html.freshElement(\"a\", {\n                href: \"#\" + noteHtmlId(element),\n                id: noteRefHtmlId(element)\n            }, [Html.text(\"[\" + (noteNumber++) + \"]\")]);\n\n            return [Html.freshElement(\"sup\", {}, [anchor])];\n        },\n        \"note\": function(element, messages, options) {\n            var children = convertElements(element.body, messages, options);\n            var backLink = Html.elementWithTag(htmlPaths.element(\"p\", {}, {fresh: false}), [\n                Html.text(\" \"),\n                Html.freshElement(\"a\", {href: \"#\" + noteRefHtmlId(element)}, [Html.text(\"â†‘\")])\n            ]);\n            var body = children.concat([backLink]);\n\n            return Html.freshElement(\"li\", {id: noteHtmlId(element)}, body);\n        },\n        \"commentReference\": convertCommentReference,\n        \"comment\": convertComment,\n        \"image\": deferredConversion(recoveringConvertImage(options.convertImage || images.dataUri)),\n        \"table\": convertTable,\n        \"tableRow\": convertTableRow,\n        \"tableCell\": convertTableCell,\n        \"break\": convertBreak\n    };\n    return {\n        convertToHtml: convertToHtml\n    };\n}\n\nvar deferredId = 1;\n\nfunction deferredConversion(func) {\n    return function(element, messages, options) {\n        return [\n            {\n                type: \"deferred\",\n                id: deferredId++,\n                value: function() {\n                    return func(element, messages, options);\n                }\n            }\n        ];\n    };\n}\n\nfunction unrecognisedStyleWarning(type, element) {\n    return results.warning(\n        \"Unrecognised \" + type + \" style: '\" + element.styleName + \"'\" +\n        \" (Style ID: \" + element.styleId + \")\"\n    );\n}\n\nfunction flatMap(values, func) {\n    return _.flatten(values.map(func), true);\n}\n\nfunction walkHtml(nodes, callback) {\n    nodes.forEach(function(node) {\n        callback(node);\n        if (node.children) {\n            walkHtml(node.children, callback);\n        }\n    });\n}\n\nvar commentAuthorLabel = exports.commentAuthorLabel = function commentAuthorLabel(comment) {\n    return comment.authorInitials || \"\";\n};\n"]},"metadata":{},"sourceType":"script"}