{"ast":null,"code":"var _ = require(\"underscore\");\n\nvar docxReader = require(\"./docx/docx-reader\");\n\nvar docxStyleMap = require(\"./docx/style-map\");\n\nvar DocumentConverter = require(\"./document-to-html\").DocumentConverter;\n\nvar convertElementToRawText = require(\"./raw-text\").convertElementToRawText;\n\nvar readStyle = require(\"./style-reader\").readStyle;\n\nvar readOptions = require(\"./options-reader\").readOptions;\n\nvar unzip = require(\"./unzip\");\n\nvar Result = require(\"./results\").Result;\n\nexports.convertToHtml = convertToHtml;\nexports.convertToMarkdown = convertToMarkdown;\nexports.convert = convert;\nexports.extractRawText = extractRawText;\nexports.images = require(\"./images\");\nexports.transforms = require(\"./transforms\");\nexports.underline = require(\"./underline\");\nexports.embedStyleMap = embedStyleMap;\nexports.readEmbeddedStyleMap = readEmbeddedStyleMap;\n\nfunction convertToHtml(input, options) {\n  return convert(input, options);\n}\n\nfunction convertToMarkdown(input, options) {\n  var markdownOptions = Object.create(options || {});\n  markdownOptions.outputFormat = \"markdown\";\n  return convert(input, markdownOptions);\n}\n\nfunction convert(input, options) {\n  options = readOptions(options);\n  return unzip.openZip(input).tap(function (docxFile) {\n    return docxStyleMap.readStyleMap(docxFile).then(function (styleMap) {\n      options.embeddedStyleMap = styleMap;\n    });\n  }).then(function (docxFile) {\n    return docxReader.read(docxFile, input).then(function (documentResult) {\n      return documentResult.map(options.transformDocument);\n    }).then(function (documentResult) {\n      return convertDocumentToHtml(documentResult, options);\n    });\n  });\n}\n\nfunction readEmbeddedStyleMap(input) {\n  return unzip.openZip(input).then(docxStyleMap.readStyleMap);\n}\n\nfunction convertDocumentToHtml(documentResult, options) {\n  var styleMapResult = parseStyleMap(options.readStyleMap());\n\n  var parsedOptions = _.extend({}, options, {\n    styleMap: styleMapResult.value\n  });\n\n  var documentConverter = new DocumentConverter(parsedOptions);\n  return documentResult.flatMapThen(function (document) {\n    return styleMapResult.flatMapThen(function (styleMap) {\n      return documentConverter.convertToHtml(document);\n    });\n  });\n}\n\nfunction parseStyleMap(styleMap) {\n  return Result.combine((styleMap || []).map(readStyle)).map(function (styleMap) {\n    return styleMap.filter(function (styleMapping) {\n      return !!styleMapping;\n    });\n  });\n}\n\nfunction extractRawText(input) {\n  return unzip.openZip(input).then(docxReader.read).then(function (documentResult) {\n    return documentResult.map(convertElementToRawText);\n  });\n}\n\nfunction embedStyleMap(input, styleMap) {\n  return unzip.openZip(input).tap(function (docxFile) {\n    return docxStyleMap.writeStyleMap(docxFile, styleMap);\n  }).then(function (docxFile) {\n    return docxFile.toBuffer();\n  }).then(function (buffer) {\n    return {\n      toBuffer: function toBuffer() {\n        return buffer;\n      }\n    };\n  });\n}\n\nexports.styleMapping = function () {\n  throw new Error('Use a raw string instead of mammoth.styleMapping e.g. \"p[style-name=\\'Title\\'] => h1\" instead of mammoth.styleMapping(\"p[style-name=\\'Title\\'] => h1\")');\n};","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/index.js"],"names":["_","require","docxReader","docxStyleMap","DocumentConverter","convertElementToRawText","readStyle","readOptions","unzip","Result","exports","convertToHtml","convertToMarkdown","convert","extractRawText","images","transforms","underline","embedStyleMap","readEmbeddedStyleMap","input","options","markdownOptions","Object","create","outputFormat","openZip","tap","docxFile","readStyleMap","then","styleMap","embeddedStyleMap","read","documentResult","map","transformDocument","convertDocumentToHtml","styleMapResult","parseStyleMap","parsedOptions","extend","value","documentConverter","flatMapThen","document","combine","filter","styleMapping","writeStyleMap","toBuffer","buffer","Error"],"mappings":"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","sourcesContent":["var _ = require(\"underscore\");\n\nvar docxReader = require(\"./docx/docx-reader\");\nvar docxStyleMap = require(\"./docx/style-map\");\nvar DocumentConverter = require(\"./document-to-html\").DocumentConverter;\nvar convertElementToRawText = require(\"./raw-text\").convertElementToRawText;\nvar readStyle = require(\"./style-reader\").readStyle;\nvar readOptions = require(\"./options-reader\").readOptions;\nvar unzip = require(\"./unzip\");\nvar Result = require(\"./results\").Result;\n\nexports.convertToHtml = convertToHtml;\nexports.convertToMarkdown = convertToMarkdown;\nexports.convert = convert;\nexports.extractRawText = extractRawText;\nexports.images = require(\"./images\");\nexports.transforms = require(\"./transforms\");\nexports.underline = require(\"./underline\");\nexports.embedStyleMap = embedStyleMap;\nexports.readEmbeddedStyleMap = readEmbeddedStyleMap;\n\nfunction convertToHtml(input, options) {\n    return convert(input, options);\n}\n\nfunction convertToMarkdown(input, options) {\n    var markdownOptions = Object.create(options || {});\n    markdownOptions.outputFormat = \"markdown\";\n    return convert(input, markdownOptions);\n}\n\nfunction convert(input, options) {\n    options = readOptions(options);\n\n    return unzip.openZip(input)\n        .tap(function(docxFile) {\n            return docxStyleMap.readStyleMap(docxFile).then(function(styleMap) {\n                options.embeddedStyleMap = styleMap;\n            });\n        })\n        .then(function(docxFile) {\n            return docxReader.read(docxFile, input)\n                .then(function(documentResult) {\n                    return documentResult.map(options.transformDocument);\n                })\n                .then(function(documentResult) {\n                    return convertDocumentToHtml(documentResult, options);\n                });\n        });\n}\n\nfunction readEmbeddedStyleMap(input) {\n    return unzip.openZip(input)\n        .then(docxStyleMap.readStyleMap);\n}\n\nfunction convertDocumentToHtml(documentResult, options) {\n    var styleMapResult = parseStyleMap(options.readStyleMap());\n    var parsedOptions = _.extend({}, options, {\n        styleMap: styleMapResult.value\n    });\n    var documentConverter = new DocumentConverter(parsedOptions);\n\n    return documentResult.flatMapThen(function(document) {\n        return styleMapResult.flatMapThen(function(styleMap) {\n            return documentConverter.convertToHtml(document);\n        });\n    });\n}\n\nfunction parseStyleMap(styleMap) {\n    return Result.combine((styleMap || []).map(readStyle))\n        .map(function(styleMap) {\n            return styleMap.filter(function(styleMapping) {\n                return !!styleMapping;\n            });\n        });\n}\n\n\nfunction extractRawText(input) {\n    return unzip.openZip(input)\n        .then(docxReader.read)\n        .then(function(documentResult) {\n            return documentResult.map(convertElementToRawText);\n        });\n}\n\nfunction embedStyleMap(input, styleMap) {\n    return unzip.openZip(input)\n        .tap(function(docxFile) {\n            return docxStyleMap.writeStyleMap(docxFile, styleMap);\n        })\n        .then(function(docxFile) {\n            return docxFile.toBuffer();\n        })\n        .then(function(buffer) {\n            return {\n                toBuffer: function() {\n                    return buffer;\n                }\n            };\n        });\n}\n\nexports.styleMapping = function() {\n    throw new Error('Use a raw string instead of mammoth.styleMapping e.g. \"p[style-name=\\'Title\\'] => h1\" instead of mammoth.styleMapping(\"p[style-name=\\'Title\\'] => h1\")');\n};\n"]},"metadata":{},"sourceType":"script"}