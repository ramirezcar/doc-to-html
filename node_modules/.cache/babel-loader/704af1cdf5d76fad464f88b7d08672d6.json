{"ast":null,"code":"exports.paragraph = paragraph;\nexports.run = run;\nexports.table = table;\nexports.bold = new Matcher(\"bold\");\nexports.italic = new Matcher(\"italic\");\nexports.underline = new Matcher(\"underline\");\nexports.strikethrough = new Matcher(\"strikethrough\");\nexports.allCaps = new Matcher(\"allCaps\");\nexports.smallCaps = new Matcher(\"smallCaps\");\nexports.commentReference = new Matcher(\"commentReference\");\nexports.lineBreak = new Matcher(\"break\", {\n  breakType: \"line\"\n});\nexports.pageBreak = new Matcher(\"break\", {\n  breakType: \"page\"\n});\nexports.columnBreak = new Matcher(\"break\", {\n  breakType: \"column\"\n});\nexports.equalTo = equalTo;\nexports.startsWith = startsWith;\n\nfunction paragraph(options) {\n  return new Matcher(\"paragraph\", options);\n}\n\nfunction run(options) {\n  return new Matcher(\"run\", options);\n}\n\nfunction table(options) {\n  return new Matcher(\"table\", options);\n}\n\nfunction Matcher(elementType, options) {\n  options = options || {};\n  this._elementType = elementType;\n  this._styleId = options.styleId;\n  this._styleName = options.styleName;\n\n  if (options.list) {\n    this._listIndex = options.list.levelIndex;\n    this._listIsOrdered = options.list.isOrdered;\n  }\n}\n\nMatcher.prototype.matches = function (element) {\n  return element.type === this._elementType && (this._styleId === undefined || element.styleId === this._styleId) && (this._styleName === undefined || element.styleName && this._styleName.operator(this._styleName.operand, element.styleName)) && (this._listIndex === undefined || isList(element, this._listIndex, this._listIsOrdered)) && (this._breakType === undefined || this._breakType === element.breakType);\n};\n\nfunction isList(element, levelIndex, isOrdered) {\n  return element.numbering && element.numbering.level == levelIndex && element.numbering.isOrdered == isOrdered;\n}\n\nfunction equalTo(value) {\n  return {\n    operator: operatorEqualTo,\n    operand: value\n  };\n}\n\nfunction startsWith(value) {\n  return {\n    operator: operatorStartsWith,\n    operand: value\n  };\n}\n\nfunction operatorEqualTo(first, second) {\n  return first.toUpperCase() === second.toUpperCase();\n}\n\nfunction operatorStartsWith(first, second) {\n  return second.toUpperCase().indexOf(first.toUpperCase()) === 0;\n}","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/styles/document-matchers.js"],"names":["exports","paragraph","run","table","bold","Matcher","italic","underline","strikethrough","allCaps","smallCaps","commentReference","lineBreak","breakType","pageBreak","columnBreak","equalTo","startsWith","options","elementType","_elementType","_styleId","styleId","_styleName","styleName","list","_listIndex","levelIndex","_listIsOrdered","isOrdered","prototype","matches","element","type","undefined","operator","operand","isList","_breakType","numbering","level","value","operatorEqualTo","operatorStartsWith","first","second","toUpperCase","indexOf"],"mappings":"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","sourcesContent":["exports.paragraph = paragraph;\nexports.run = run;\nexports.table = table;\nexports.bold = new Matcher(\"bold\");\nexports.italic = new Matcher(\"italic\");\nexports.underline = new Matcher(\"underline\");\nexports.strikethrough = new Matcher(\"strikethrough\");\nexports.allCaps = new Matcher(\"allCaps\");\nexports.smallCaps = new Matcher(\"smallCaps\");\nexports.commentReference = new Matcher(\"commentReference\");\nexports.lineBreak = new Matcher(\"break\", {breakType: \"line\"});\nexports.pageBreak = new Matcher(\"break\", {breakType: \"page\"});\nexports.columnBreak = new Matcher(\"break\", {breakType: \"column\"});\nexports.equalTo = equalTo;\nexports.startsWith = startsWith;\n\n\nfunction paragraph(options) {\n    return new Matcher(\"paragraph\", options);\n}\n\nfunction run(options) {\n    return new Matcher(\"run\", options);\n}\n\nfunction table(options) {\n    return new Matcher(\"table\", options);\n}\n\nfunction Matcher(elementType, options) {\n    options = options || {};\n    this._elementType = elementType;\n    this._styleId = options.styleId;\n    this._styleName = options.styleName;\n    if (options.list) {\n        this._listIndex = options.list.levelIndex;\n        this._listIsOrdered = options.list.isOrdered;\n    }\n}\n\nMatcher.prototype.matches = function(element) {\n    return element.type === this._elementType &&\n        (this._styleId === undefined || element.styleId === this._styleId) &&\n        (this._styleName === undefined || (element.styleName && this._styleName.operator(this._styleName.operand, element.styleName))) &&\n        (this._listIndex === undefined || isList(element, this._listIndex, this._listIsOrdered)) &&\n        (this._breakType === undefined || this._breakType === element.breakType);\n};\n\nfunction isList(element, levelIndex, isOrdered) {\n    return element.numbering &&\n        element.numbering.level == levelIndex &&\n        element.numbering.isOrdered == isOrdered;\n}\n\nfunction equalTo(value) {\n    return {\n        operator: operatorEqualTo,\n        operand: value\n    };\n}\n\nfunction startsWith(value) {\n    return {\n        operator: operatorStartsWith,\n        operand: value\n    };\n}\n\nfunction operatorEqualTo(first, second) {\n    return first.toUpperCase() === second.toUpperCase();\n}\n\nfunction operatorStartsWith(first, second) {\n    return second.toUpperCase().indexOf(first.toUpperCase()) === 0;\n}\n"]},"metadata":{},"sourceType":"script"}