{"ast":null,"code":"var _ = require(\"underscore\");\n\nexports.Result = Result;\nexports.success = success;\nexports.warning = warning;\nexports.error = error;\n\nfunction Result(value, messages) {\n  this.value = value;\n  this.messages = messages || [];\n}\n\nResult.prototype.map = function (func) {\n  return new Result(func(this.value), this.messages);\n};\n\nResult.prototype.flatMap = function (func) {\n  var funcResult = func(this.value);\n  return new Result(funcResult.value, combineMessages([this, funcResult]));\n};\n\nResult.prototype.flatMapThen = function (func) {\n  var that = this;\n  return func(this.value).then(function (otherResult) {\n    return new Result(otherResult.value, combineMessages([that, otherResult]));\n  });\n};\n\nResult.combine = function (results) {\n  var values = _.flatten(_.pluck(results, \"value\"));\n\n  var messages = combineMessages(results);\n  return new Result(values, messages);\n};\n\nfunction success(value) {\n  return new Result(value, []);\n}\n\nfunction warning(message) {\n  return {\n    type: \"warning\",\n    message: message\n  };\n}\n\nfunction error(exception) {\n  return {\n    type: \"error\",\n    message: exception.message,\n    error: exception\n  };\n}\n\nfunction combineMessages(results) {\n  var messages = [];\n\n  _.flatten(_.pluck(results, \"messages\"), true).forEach(function (message) {\n    if (!containsMessage(messages, message)) {\n      messages.push(message);\n    }\n  });\n\n  return messages;\n}\n\nfunction containsMessage(messages, message) {\n  return _.find(messages, isSameMessage.bind(null, message)) !== undefined;\n}\n\nfunction isSameMessage(first, second) {\n  return first.type === second.type && first.message === second.message;\n}","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/results.js"],"names":["_","require","exports","Result","success","warning","error","value","messages","prototype","map","func","flatMap","funcResult","combineMessages","flatMapThen","that","then","otherResult","combine","results","values","flatten","pluck","message","type","exception","forEach","containsMessage","push","find","isSameMessage","bind","undefined","first","second"],"mappings":"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","sourcesContent":["var _ = require(\"underscore\");\n\n\nexports.Result = Result;\nexports.success = success;\nexports.warning = warning;\nexports.error = error;\n\n\nfunction Result(value, messages) {\n    this.value = value;\n    this.messages = messages || [];\n}\n\nResult.prototype.map = function(func) {\n    return new Result(func(this.value), this.messages);\n};\n\nResult.prototype.flatMap = function(func) {\n    var funcResult = func(this.value);\n    return new Result(funcResult.value, combineMessages([this, funcResult]));\n};\n\nResult.prototype.flatMapThen = function(func) {\n    var that = this;\n    return func(this.value).then(function(otherResult) {\n        return new Result(otherResult.value, combineMessages([that, otherResult]));\n    });\n};\n\nResult.combine = function(results) {\n    var values = _.flatten(_.pluck(results, \"value\"));\n    var messages = combineMessages(results);\n    return new Result(values, messages);\n};\n\nfunction success(value) {\n    return new Result(value, []);\n}\n\nfunction warning(message) {\n    return {\n        type: \"warning\",\n        message: message\n    };\n}\n\nfunction error(exception) {\n    return {\n        type: \"error\",\n        message: exception.message,\n        error: exception\n    };\n}\n\nfunction combineMessages(results) {\n    var messages = [];\n    _.flatten(_.pluck(results, \"messages\"), true).forEach(function(message) {\n        if (!containsMessage(messages, message)) {\n            messages.push(message);\n        }\n    });\n    return messages;\n}\n\nfunction containsMessage(messages, message) {\n    return _.find(messages, isSameMessage.bind(null, message)) !== undefined;\n}\n\nfunction isSameMessage(first, second) {\n    return first.type === second.type && first.message === second.message;\n}\n"]},"metadata":{},"sourceType":"script"}