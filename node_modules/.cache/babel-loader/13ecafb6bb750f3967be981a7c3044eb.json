{"ast":null,"code":"var util = require(\"util\");\n\nvar _ = require(\"underscore\");\n\nexports.writer = writer;\n\nfunction writer(options) {\n  options = options || {};\n\n  if (options.prettyPrint) {\n    return prettyWriter();\n  } else {\n    return simpleWriter();\n  }\n}\n\nvar indentedElements = {\n  div: true,\n  p: true,\n  ul: true,\n  li: true\n};\n\nfunction prettyWriter() {\n  var indentationLevel = 0;\n  var indentation = \"  \";\n  var stack = [];\n  var start = true;\n  var inText = false;\n  var writer = simpleWriter();\n\n  function open(tagName, attributes) {\n    if (indentedElements[tagName]) {\n      indent();\n    }\n\n    stack.push(tagName);\n    writer.open(tagName, attributes);\n\n    if (indentedElements[tagName]) {\n      indentationLevel++;\n    }\n\n    start = false;\n  }\n\n  function close(tagName) {\n    if (indentedElements[tagName]) {\n      indentationLevel--;\n      indent();\n    }\n\n    stack.pop();\n    writer.close(tagName);\n  }\n\n  function text(value) {\n    startText();\n    var text = isInPre() ? value : value.replace(\"\\n\", \"\\n\" + indentation);\n    writer.text(text);\n  }\n\n  function selfClosing(tagName, attributes) {\n    indent();\n    writer.selfClosing(tagName, attributes);\n  }\n\n  function insideIndentedElement() {\n    return stack.length === 0 || indentedElements[stack[stack.length - 1]];\n  }\n\n  function startText() {\n    if (!inText) {\n      indent();\n      inText = true;\n    }\n  }\n\n  function indent() {\n    inText = false;\n\n    if (!start && insideIndentedElement() && !isInPre()) {\n      writer._append(\"\\n\");\n\n      for (var i = 0; i < indentationLevel; i++) {\n        writer._append(indentation);\n      }\n    }\n  }\n\n  function isInPre() {\n    return _.some(stack, function (tagName) {\n      return tagName === \"pre\";\n    });\n  }\n\n  return {\n    asString: writer.asString,\n    open: open,\n    close: close,\n    text: text,\n    selfClosing: selfClosing\n  };\n}\n\nfunction simpleWriter() {\n  var fragments = [];\n\n  function open(tagName, attributes) {\n    var attributeString = generateAttributeString(attributes);\n    fragments.push(util.format(\"<%s%s>\", tagName, attributeString));\n  }\n\n  function close(tagName) {\n    fragments.push(util.format(\"</%s>\", tagName));\n  }\n\n  function selfClosing(tagName, attributes) {\n    var attributeString = generateAttributeString(attributes);\n    fragments.push(util.format(\"<%s%s />\", tagName, attributeString));\n  }\n\n  function generateAttributeString(attributes) {\n    return _.map(attributes, function (value, key) {\n      return util.format(' %s=\"%s\"', key, escapeHtmlAttribute(value));\n    }).join(\"\");\n  }\n\n  function text(value) {\n    fragments.push(escapeHtmlText(value));\n  }\n\n  function append(html) {\n    fragments.push(html);\n  }\n\n  function asString() {\n    return fragments.join(\"\");\n  }\n\n  return {\n    asString: asString,\n    open: open,\n    close: close,\n    text: text,\n    selfClosing: selfClosing,\n    _append: append\n  };\n}\n\nfunction escapeHtmlText(value) {\n  return value.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}\n\nfunction escapeHtmlAttribute(value) {\n  return value.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n}","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/writers/html-writer.js"],"names":["util","require","_","exports","writer","options","prettyPrint","prettyWriter","simpleWriter","indentedElements","div","p","ul","li","indentationLevel","indentation","stack","start","inText","open","tagName","attributes","indent","push","close","pop","text","value","startText","isInPre","replace","selfClosing","insideIndentedElement","length","_append","i","some","asString","fragments","attributeString","generateAttributeString","format","map","key","escapeHtmlAttribute","join","escapeHtmlText","append","html"],"mappings":"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","sourcesContent":["var util = require(\"util\");\nvar _ = require(\"underscore\");\n\nexports.writer = writer;\n\nfunction writer(options) {\n    options = options || {};\n    if (options.prettyPrint) {\n        return prettyWriter();\n    } else {\n        return simpleWriter();\n    }\n}\n\n\nvar indentedElements = {\n    div: true,\n    p: true,\n    ul: true,\n    li: true\n};\n\n\nfunction prettyWriter() {\n    var indentationLevel = 0;\n    var indentation = \"  \";\n    var stack = [];\n    var start = true;\n    var inText = false;\n    \n    var writer = simpleWriter();\n    \n    function open(tagName, attributes) {\n        if (indentedElements[tagName]) {\n            indent();\n        }\n        stack.push(tagName);\n        writer.open(tagName, attributes);\n        if (indentedElements[tagName]) {\n            indentationLevel++;\n        }\n        start = false;\n    }\n    \n    function close(tagName) {\n        if (indentedElements[tagName]) {\n            indentationLevel--;\n            indent();\n        }\n        stack.pop();\n        writer.close(tagName);\n    }\n    \n    function text(value) {\n        startText();\n        var text = isInPre() ? value : value.replace(\"\\n\", \"\\n\" + indentation);\n        writer.text(text);\n    }\n    \n    function selfClosing(tagName, attributes) {\n        indent();\n        writer.selfClosing(tagName, attributes);\n    }\n    \n    function insideIndentedElement() {\n        return stack.length === 0 || indentedElements[stack[stack.length - 1]];\n    }\n    \n    function startText() {\n        if (!inText) {\n            indent();\n            inText = true;\n        }\n    }\n    \n    function indent() {\n        inText = false;\n        if (!start && insideIndentedElement() && !isInPre()) {\n            writer._append(\"\\n\");\n            for (var i = 0; i < indentationLevel; i++) {\n                writer._append(indentation);\n            }\n        }\n    }\n    \n    function isInPre() {\n        return _.some(stack, function(tagName) {\n            return tagName === \"pre\";\n        });\n    }\n    \n    return {\n        asString: writer.asString,\n        open: open,\n        close: close,\n        text: text,\n        selfClosing: selfClosing\n    };\n}\n\n\nfunction simpleWriter() {\n    var fragments = [];\n    \n    function open(tagName, attributes) {\n        var attributeString = generateAttributeString(attributes);\n        fragments.push(util.format(\"<%s%s>\", tagName, attributeString));\n    }\n    \n    function close(tagName) {\n        fragments.push(util.format(\"</%s>\", tagName));\n    }\n    \n    function selfClosing(tagName, attributes) {\n        var attributeString = generateAttributeString(attributes);\n        fragments.push(util.format(\"<%s%s />\", tagName, attributeString));\n    }\n    \n    function generateAttributeString(attributes) {\n        return _.map(attributes, function(value, key) {\n            return util.format(' %s=\"%s\"', key, escapeHtmlAttribute(value));\n        }).join(\"\");\n    }\n    \n    function text(value) {\n        fragments.push(escapeHtmlText(value));\n    }\n    \n    function append(html) {\n        fragments.push(html);\n    }\n    \n    function asString() {\n        return fragments.join(\"\");\n    }\n    \n    return {\n        asString: asString,\n        open: open,\n        close: close,\n        text: text,\n        selfClosing: selfClosing,\n        _append: append\n    };\n}\n\nfunction escapeHtmlText(value) {\n    return value\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n\nfunction escapeHtmlAttribute(value) {\n    return value\n        .replace(/&/g, '&amp;')\n        .replace(/\"/g, '&quot;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;');\n}\n"]},"metadata":{},"sourceType":"script"}