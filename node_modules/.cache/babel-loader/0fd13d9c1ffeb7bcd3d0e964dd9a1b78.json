{"ast":null,"code":"exports.readRelationships = readRelationships;\nexports.defaultValue = new Relationships([]);\nexports.Relationships = Relationships;\n\nfunction readRelationships(element) {\n  var relationships = [];\n  element.children.forEach(function (child) {\n    if (child.name === \"{http://schemas.openxmlformats.org/package/2006/relationships}Relationship\") {\n      var relationship = {\n        relationshipId: child.attributes.Id,\n        target: child.attributes.Target,\n        type: child.attributes.Type\n      };\n      relationships.push(relationship);\n    }\n  });\n  return new Relationships(relationships);\n}\n\nfunction Relationships(relationships) {\n  var targetsByRelationshipId = {};\n  relationships.forEach(function (relationship) {\n    targetsByRelationshipId[relationship.relationshipId] = relationship.target;\n  });\n  var targetsByType = {};\n  relationships.forEach(function (relationship) {\n    if (!targetsByType[relationship.type]) {\n      targetsByType[relationship.type] = [];\n    }\n\n    targetsByType[relationship.type].push(relationship.target);\n  });\n  return {\n    findTargetByRelationshipId: function findTargetByRelationshipId(relationshipId) {\n      return targetsByRelationshipId[relationshipId];\n    },\n    findTargetsByType: function findTargetsByType(type) {\n      return targetsByType[type] || [];\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/Carlos/Desktop/Coding/doc-to-html/node_modules/mammoth/lib/docx/relationships-reader.js"],"names":["exports","readRelationships","defaultValue","Relationships","element","relationships","children","forEach","child","name","relationship","relationshipId","attributes","Id","target","Target","type","Type","push","targetsByRelationshipId","targetsByType","findTargetByRelationshipId","findTargetsByType"],"mappings":"AAAAA,OAAO,CAACC,iBAAR,GAA4BA,iBAA5B;AACAD,OAAO,CAACE,YAAR,GAAuB,IAAIC,aAAJ,CAAkB,EAAlB,CAAvB;AACAH,OAAO,CAACG,aAAR,GAAwBA,aAAxB;;AAGA,SAASF,iBAAT,CAA2BG,OAA3B,EAAoC;AAChC,MAAIC,aAAa,GAAG,EAApB;AACAD,EAAAA,OAAO,CAACE,QAAR,CAAiBC,OAAjB,CAAyB,UAASC,KAAT,EAAgB;AACrC,QAAIA,KAAK,CAACC,IAAN,KAAe,4EAAnB,EAAiG;AAC7F,UAAIC,YAAY,GAAG;AACfC,QAAAA,cAAc,EAAEH,KAAK,CAACI,UAAN,CAAiBC,EADlB;AAEfC,QAAAA,MAAM,EAAEN,KAAK,CAACI,UAAN,CAAiBG,MAFV;AAGfC,QAAAA,IAAI,EAAER,KAAK,CAACI,UAAN,CAAiBK;AAHR,OAAnB;AAKAZ,MAAAA,aAAa,CAACa,IAAd,CAAmBR,YAAnB;AACH;AACJ,GATD;AAUA,SAAO,IAAIP,aAAJ,CAAkBE,aAAlB,CAAP;AACH;;AAED,SAASF,aAAT,CAAuBE,aAAvB,EAAsC;AAClC,MAAIc,uBAAuB,GAAG,EAA9B;AACAd,EAAAA,aAAa,CAACE,OAAd,CAAsB,UAASG,YAAT,EAAuB;AACzCS,IAAAA,uBAAuB,CAACT,YAAY,CAACC,cAAd,CAAvB,GAAuDD,YAAY,CAACI,MAApE;AACH,GAFD;AAIA,MAAIM,aAAa,GAAG,EAApB;AACAf,EAAAA,aAAa,CAACE,OAAd,CAAsB,UAASG,YAAT,EAAuB;AACzC,QAAI,CAACU,aAAa,CAACV,YAAY,CAACM,IAAd,CAAlB,EAAuC;AACnCI,MAAAA,aAAa,CAACV,YAAY,CAACM,IAAd,CAAb,GAAmC,EAAnC;AACH;;AACDI,IAAAA,aAAa,CAACV,YAAY,CAACM,IAAd,CAAb,CAAiCE,IAAjC,CAAsCR,YAAY,CAACI,MAAnD;AACH,GALD;AAOA,SAAO;AACHO,IAAAA,0BAA0B,EAAE,oCAASV,cAAT,EAAyB;AACjD,aAAOQ,uBAAuB,CAACR,cAAD,CAA9B;AACH,KAHE;AAIHW,IAAAA,iBAAiB,EAAE,2BAASN,IAAT,EAAe;AAC9B,aAAOI,aAAa,CAACJ,IAAD,CAAb,IAAuB,EAA9B;AACH;AANE,GAAP;AAQH","sourcesContent":["exports.readRelationships = readRelationships;\nexports.defaultValue = new Relationships([]);\nexports.Relationships = Relationships;\n\n\nfunction readRelationships(element) {\n    var relationships = [];\n    element.children.forEach(function(child) {\n        if (child.name === \"{http://schemas.openxmlformats.org/package/2006/relationships}Relationship\") {\n            var relationship = {\n                relationshipId: child.attributes.Id,\n                target: child.attributes.Target,\n                type: child.attributes.Type\n            };\n            relationships.push(relationship);\n        }\n    });\n    return new Relationships(relationships);\n}\n\nfunction Relationships(relationships) {\n    var targetsByRelationshipId = {};\n    relationships.forEach(function(relationship) {\n        targetsByRelationshipId[relationship.relationshipId] = relationship.target;\n    });\n    \n    var targetsByType = {};\n    relationships.forEach(function(relationship) {\n        if (!targetsByType[relationship.type]) {\n            targetsByType[relationship.type] = [];\n        }\n        targetsByType[relationship.type].push(relationship.target);\n    });\n            \n    return {\n        findTargetByRelationshipId: function(relationshipId) {\n            return targetsByRelationshipId[relationshipId];\n        },\n        findTargetsByType: function(type) {\n            return targetsByType[type] || [];\n        }\n    };\n}\n"]},"metadata":{},"sourceType":"script"}